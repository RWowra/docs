<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="_Skins_HTML5_Side" lang="en" xml:lang="en" data-mc-search-type="Stem" data-mc-help-system-file-name="COSYM_Online_Help.xml" data-mc-path-to-help-system="../../../" data-mc-has-content-body="True" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Virtual Networks|[%=System.LinkedTitle%]">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="msapplication-config" content="../../../Skins/Favicons/browserconfig.xml" />
        <link rel="shortcut icon" href="../../../Skins/Favicons/favicon_3.ico" />
        <link rel="icon" sizes="16x16" href="../../../Skins/Favicons/favicon_2.ico" />
        <link rel="icon" sizes="16x16" href="../../../Skins/Favicons/favicon_1.ico" />
        <link rel="icon" sizes="16x16" href="../../../Skins/Favicons/favicon.ico" />
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Fluid/Stylesheets/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" /><title>vNet Basics and example usage with  ETAS Virtual Networks</title>
        <link href="../../TableStyles/note.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link href="../../TableStyles/table2.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link href="../../Stylesheets/ETAS_flare_EN.css" rel="stylesheet" type="text/css" />
        <meta name="Product" content="COSYM" />
        <meta name="Version" content="V3.4.1" />
        <meta name="Revision" content="R01 EN - 05.2024" />
        <meta name="Copyright Year" content="2024" />
        <meta name="Doc Type" content="User Guide" />
        <script src="../../Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Scripts/foundation.6.2.3_custom.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Scripts/MadCapAll.js" type="text/javascript" defer="defer">
        </script>
    </head>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-left" role="navigation" id="offCanvas" data-off-canvas="" data-position="left" data-mc-ignore="true">
                    <ul class="off-canvas-accordion vertical menu off-canvas-list" data-accordion-menu="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div data-sticky-container="" class="title-bar-container">
                        <nav class="title-bar tab-bar sticky" role="banner" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="only screen and (max-width: 1279px)" data-mc-ignore="true"><a class="skip-to-content fluid-skip showOnFocus" href="#">Skip To Main Content</a>
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <div class="central-account-wrapper">
                                        <div class="central-dropdown"><a class="central-account-drop"><span class="central-account-image"></span><span class="central-account-text">Account</span></a>
                                            <div class="central-dropdown-content"><a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                                                <hr class="central-separator" /><a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                                            </div>
                                        </div>
                                    </div>
                                    <button class="menu-icon" aria-label="Show Navigation Panel" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../Help.htm" alt="Logo"></a>
                                </div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" role="navigation" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                        </li>
                                    </ul>
                                </div>
                                <div class="central-account-wrapper">
                                    <div class="central-dropdown"><a class="central-account-drop"><span class="central-account-image"></span><span class="central-account-text">Account</span></a>
                                        <div class="central-dropdown-content"><a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                                            <hr class="central-separator" /><a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                                        </div>
                                    </div>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie">
                                                <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search" />
                                                <div class="search-filter-wrapper"><span class="invisible-label" id="search-filters-label">Filter: </span>
                                                    <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                                    </div>
                                                    <div class="search-filter-content" id="sf-content">
                                                        <ul>
                                                            <li>
                                                                <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001"><span id="filterSelectorLabel-00001">All Files</span>
                                                                </button>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Search" role="button" tabindex="0"><span class="invisible-label">Submit Search</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <div class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <nav class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </nav>
                            <div class="body-container">
                                <div id="mc-main-content" role="main" data-mc-content-body="True">
                                    <h2>vNet Basics and example usage with  ETAS Virtual Networks</h2>
                                    <h3>Overview</h3>
                                    <ul>
                                        <li>Although all vNet interfaces (CAN, FlexRay, Ethernet) look similar, they are totally independent from each other</li>
                                        <li>So there is no common base class</li>
                                        <li>But the general sequence of API calls is always similar</li>
                                    </ul>
                                    <p>The following description contains facts common for all vNet interfaces: CAN, Automotive Ethernet and FlexRay. Differences between individual vNet implementations are outlined whenever necessary. Links to pages with the network-specific descriptions are also provided in such cases.</p>
                                    <h3><a name="Basic"></a>Basic API Calls</h3>
                                    <p>The following basic API calls must be done by all applications during initialization, during stepping at runtime and after the simulation. Note that, too many or too few are incorrect calls of <span class="code">mPreStepPort()</span> and <span class="code">mPostStepPort()</span> which lead to deadlocks or to different virtual times in models. So it is very important to call <span class="code">mPreStepPort()</span> and <span class="code">mPostStepPort()</span> for each network interface used. Both calls must happen with the correct stepping rate configured for the corresponding network.</p>
                                    <p class="paragraph">Refer to the <a href="Runtime.htm#Timing" class="MCXref xref">Timing diagram</a> for more details.</p>
                                    <h5>Initialization</h5>
                                    <ul>
                                        <li class="list_num">Open the shared library <span class="code">vNetInterfaceSnf.dll</span> or <span class="code"><a href="http://libvnetinterfacesnf.so/">libvNetInterfaceSnf.so</a></span> (dynamic linking at runtime)</li>
                                        <li class="list_num">Import the symbol of the C function to create the interface object</li>
                                        <li class="list_num">Call the C function to create the vNet interface object</li>
                                        <li class="list_num">Optionally call <span class="code">mGetAllPortNames()</span> to get a list of all port names configured for this executable model by network type, and, choose the right port name for the own interface. Alternatively, a fixed port name can be used and it is the responsibility of the configuration to provide an appropriate connection port</li>
                                        <li class="list_num">Call <span class="code">mOpenPort()</span> to open the desired port with the chosen name and a given port configuration, a port handle will be returned</li>
                                        <li class="list_num">Call <span class="code">mStartPort()</span> with the returned port handle, possibly configure additional properties of the interface</li>
                                    </ul>
                                    <h5>Runtime</h5>
                                    <ul>
                                        <li class="list_num">Call <span class="code">mPreStepPort()</span> using the port handle. <span>When all applications have called </span><span class="code">mPreStepPort()</span> for the first time, the network simulation knows that all applications have finished the Initialization and are ready for the cyclic operating mode.</li>
                                        <li class="list_num">During the call of <span class="code">mPreStepPort()</span> callback functions will be called to receive frames arrived on the interface.</li>
                                        <li class="list_num">Send frames to the interface using <span class="code">mSendMessage()</span>.</li>
                                        <li class="list_num">Call <span class="code">mPostStepPort()</span> to finalize the step.</li>
                                    </ul>
                                    <h5>Exit</h5>
                                    <ul>
                                        <li class="list_num">Call <span class="code">mStopPort()</span> to terminate the operation of the network interface.</li>
                                        <li class="list_num">Call <span class="code">mClosePort()</span> to close the port.</li>
                                        <li class="list_num">Close the shared library handle to unlink from it.</li>
                                    </ul>
                                    <h3>Loading Libraries</h3>
                                    <ul>
                                        <li>Initial steps aim at loading the shared library and are OS dependent - the technique used here is <i>dynamic loading and linking of a shared library</i> at run-time</li>
                                        <li>The library to load is the vNet shared library <span class="code">vNetInterfaceSnf.dll</span> (or <span class="code">libvNetInterfaceSnf.so</span> on Unix-like systems)</li>
                                    </ul>
                                    <ul>
                                        <li>The same library is used for all supported vNet interfaces<ul><li class="list2">CAN</li><li class="list2">Automotive Ethernet</li><li class="list2">FlexRay</li></ul></li>
                                    </ul>
                                    <p>The following example code loads shared libraries in an OS-independent way:</p>
                                    <h5>Loading Dynamic Library</h5>
                                    <div class="codeSnippet"><a class="codeSnippetCopyButton" role="button" href="javascript:void(0);">Copy</a>
                                        <div style="mc-code-lang: CPP;" class="codeSnippetBody" data-mc-continue="False" data-mc-line-number-start="1" data-mc-use-line-numbers="False"><pre><code>ifdef VNET_BUILD_WIN<br />&#160;<br />&#160;&#160;&#160;&#160;HMODULE <span style="color: #795da3; font-weight: bold; ">openSharedLibrary</span><span style="color: #000000; ">(</span><span style="color: #795da3; font-weight: bold; ">const</span> <span style="color: #a71d5d; ">char</span><span style="color: #000000; ">*</span> <span style="color: #795da3; font-weight: bold; ">const</span> sharedLibName<span style="color: #000000; ">,</span> <span style="color: #a71d5d; font-weight: bold; ">int</span> errorBufferSize<span style="color: #000000; ">,</span> <span style="color: #a71d5d; ">char</span><span style="color: #000000; ">*</span> errorMsg<span style="color: #000000; ">)</span><br />&#160;&#160;&#160;&#160;<span style="color: #000000; ">{</span><br />&#160;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HMODULE result <span style="color: #000000; ">=</span> <span style="color: #795da3; font-weight: bold; ">LoadLibraryEx</span><span style="color: #000000; ">(</span>sharedLibName<span style="color: #000000; ">,</span> NULL<span style="color: #000000; ">,</span> LOAD_WITH_ALTERED_SEARCH_PATH<span style="color: #000000; ">);</span><br />&#160;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #a71d5d; font-weight: bold; ">if</span> <span style="color: #000000; ">(</span>result <span style="color: #000000; ">==</span> <span style="color: #df5000; ">0</span><span style="color: #000000; ">)</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #000000; ">{</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #a71d5d; font-weight: bold; ">if</span> <span style="color: #000000; ">(</span>errorMsg <span style="color: #000000; ">!=</span> NULL<span style="color: #000000; ">)</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #000000; ">{</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LPTSTR pszMessage<span style="color: #000000; ">;</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #795da3; font-weight: bold; ">const</span> DWORD dwLastError <span style="color: #000000; ">=</span> <span style="color: #795da3; font-weight: bold; ">GetLastError</span><span style="color: #000000; ">();</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #795da3; font-weight: bold; ">FormatMessage</span><span style="color: #000000; ">(</span>FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS<span style="color: #000000; ">,</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;NULL<span style="color: #000000; ">,</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dwLastError<span style="color: #000000; ">,</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #795da3; font-weight: bold; ">MAKELANGID</span><span style="color: #000000; ">(</span>LANG_NEUTRAL<span style="color: #000000; ">,</span> SUBLANG_DEFAULT<span style="color: #000000; ">),</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #000000; ">(</span>LPTSTR<span style="color: #000000; ">)&amp;</span>pszMessage<span style="color: #000000; ">,</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #df5000; ">0</span><span style="color: #000000; ">,</span> NULL <span style="color: #000000; ">);</span><br />&#160;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #a71d5d; font-weight: bold; ">int</span> c <span style="color: #000000; ">=</span> <span style="color: #795da3; font-weight: bold; ">snprintf</span><span style="color: #000000; ">(</span>errorMsg<span style="color: #000000; ">,</span> errorBufferSize<span style="color: #000000; ">,</span> <span style="color: #df5000; ">"vNetCanHandle failed to load %s error message is '%s'\n"</span><span style="color: #000000; ">,</span> sharedLibName<span style="color: #000000; ">,</span> <span style="color: #000000; ">((</span>pszMessage<span style="color: #000000; ">!=</span><span style="color: #df5000; ">0</span><span style="color: #000000; ">)?</span>pszMessage:<span style="color: #df5000; ">"?"</span><span style="color: #000000; ">));</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #a71d5d; font-weight: bold; ">if</span> <span style="color: #000000; ">(</span>c <span style="color: #000000; ">&lt;</span> <span style="color: #df5000; ">0</span><span style="color: #000000; ">)</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;errorMsg<span style="color: #000000; ">[</span><span style="color: #df5000; ">0</span><span style="color: #000000; ">]</span> <span style="color: #000000; ">=</span> <span style="color: #df5000; ">0</span><span style="color: #000000; ">;</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #000000; ">}</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #000000; ">}</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #a71d5d; ">return</span> result<span style="color: #000000; ">;</span><br />&#160;&#160;&#160;&#160;<span style="color: #000000; ">}</span><br />&#160;<br />&#160;&#160;&#160;&#160;FARPROC <span style="color: #795da3; font-weight: bold; ">getSharedLibrarySymbol</span><span style="color: #000000; ">(</span>HMODULE module<span style="color: #000000; ">,</span> <span style="color: #795da3; font-weight: bold; ">const</span> <span style="color: #a71d5d; ">char</span><span style="color: #000000; ">*</span> <span style="color: #795da3; font-weight: bold; ">const</span> symbolName<span style="color: #000000; ">)</span> <span style="color: #000000; ">{</span><span style="color: #a71d5d; ">return</span> <span style="color: #795da3; font-weight: bold; ">GetProcAddress</span><span style="color: #000000; ">(</span>module<span style="color: #000000; ">,</span> symbolName<span style="color: #000000; ">);}</span><br />&#160;&#160;&#160;&#160;<span style="color: #a71d5d; font-weight: bold; ">int</span> <span style="color: #795da3; font-weight: bold; ">closeSharedLibrary</span><span style="color: #000000; ">(</span>HMODULE module<span style="color: #000000; ">)</span> <span style="color: #000000; ">{</span><span style="color: #a71d5d; ">return</span> <span style="color: #795da3; font-weight: bold; ">FreeLibrary</span><span style="color: #000000; ">(</span>module<span style="color: #000000; ">);}</span><br />&#160;<br /><span style="color: #969896; ">#else</span><br />&#160;<br />&#160;&#160;&#160;&#160;<span style="color: #a71d5d; font-weight: bold; ">typedef</span> <span style="color: #795da3; font-weight: bold; ">const</span> <span style="color: #a71d5d; ">void</span><span style="color: #000000; ">*</span> FARPROC<span style="color: #000000; ">;</span><br />&#160;&#160;&#160;&#160;<span style="color: #a71d5d; font-weight: bold; ">typedef</span> <span style="color: #a71d5d; ">void</span> <span style="color: #000000; ">*</span> HMODULE<span style="color: #000000; ">;</span><br />&#160;<br />&#160;&#160;&#160;&#160;HMODULE <span style="color: #795da3; font-weight: bold; ">openSharedLibrary</span><span style="color: #000000; ">(</span><span style="color: #795da3; font-weight: bold; ">const</span> <span style="color: #a71d5d; ">char</span><span style="color: #000000; ">*</span> <span style="color: #795da3; font-weight: bold; ">const</span> sharedLibName<span style="color: #000000; ">,</span> <span style="color: #a71d5d; font-weight: bold; ">int</span> errorBufferSize<span style="color: #000000; ">,</span> <span style="color: #a71d5d; ">char</span><span style="color: #000000; ">*</span> errorMsg<span style="color: #000000; ">)</span><br />&#160;&#160;&#160;&#160;<span style="color: #000000; ">{</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #795da3; font-weight: bold; ">dlerror</span><span style="color: #000000; ">();</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #a71d5d; ">void</span> <span style="color: #000000; ">*</span> result <span style="color: #000000; ">=</span> <span style="color: #795da3; font-weight: bold; ">dlopen</span><span style="color: #000000; ">(</span>sharedLibName<span style="color: #000000; ">,</span> RTLD_LAZY | RTLD_GLOBAL<span style="color: #000000; ">);</span><br />&#160;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #a71d5d; font-weight: bold; ">if</span> <span style="color: #000000; ">(</span>result <span style="color: #000000; ">==</span> NULL<span style="color: #000000; ">)</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #000000; ">{</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #a71d5d; font-weight: bold; ">if</span> <span style="color: #000000; ">(</span>errorMsg <span style="color: #000000; ">!=</span> NULL<span style="color: #000000; ">)</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #000000; ">{</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #795da3; font-weight: bold; ">snprintf</span><span style="color: #000000; ">(</span>errorMsg<span style="color: #000000; ">,</span> errorBufferSize <span style="color: #000000; ">-</span> <span style="color: #df5000; ">1</span><span style="color: #000000; ">,</span> <span style="color: #df5000; ">"vNetCanHandle failed to load %s error message is '%s'"</span><span style="color: #000000; ">,</span> sharedLibName<span style="color: #000000; ">,</span> <span style="color: #795da3; font-weight: bold; ">dlerror</span><span style="color: #000000; ">());</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #000000; ">}</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #a71d5d; ">return</span> NULL<span style="color: #000000; ">;</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #000000; ">}</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #a71d5d; ">return</span> result<span style="color: #000000; ">;</span><br />&#160;&#160;&#160;&#160;<span style="color: #000000; ">}</span><br />&#160;<br />&#160;&#160;&#160;&#160;FARPROC <span style="color: #795da3; font-weight: bold; ">getSharedLibrarySymbol</span><span style="color: #000000; ">(</span>HMODULE module<span style="color: #000000; ">,</span> <span style="color: #795da3; font-weight: bold; ">const</span> <span style="color: #a71d5d; ">char</span><span style="color: #000000; ">*</span> <span style="color: #795da3; font-weight: bold; ">const</span> symbolName<span style="color: #000000; ">)</span> <span style="color: #000000; ">{</span><span style="color: #a71d5d; ">return</span> <span style="color: #795da3; font-weight: bold; ">dlsym</span><span style="color: #000000; ">(</span>module<span style="color: #000000; ">,</span> symbolName<span style="color: #000000; ">);}</span><br />&#160;&#160;&#160;&#160;<span style="color: #a71d5d; font-weight: bold; ">int</span> <span style="color: #795da3; font-weight: bold; ">closeSharedLibrary</span><span style="color: #000000; ">(</span>HMODULE module<span style="color: #000000; ">)</span> <span style="color: #000000; ">{</span><span style="color: #a71d5d; ">return</span> <span style="color: #795da3; font-weight: bold; ">dlclose</span><span style="color: #000000; ">(</span>module<span style="color: #000000; ">);}</span><br />&#160;<br /><span style="color: #969896; ">#endif</span></code></pre>
                                        </div>
                                    </div>
                                    <p>As mentioned here there are different SNF shared libraries for all 3 network types. They will be loaded automatically by the vNet library.</p>
                                    <h3><a name="Getting"></a>Getting Symbols</h3>
                                    <ul>
                                        <li class="list">The next step is to import a pointer to a function to create the desired vNet interface, the names of the functions are listed in the 2nd column in the following table</li>
                                        <li class="list">The function pointer is obtained by importing a link symbol from the shared library</li>
                                        <li class="list">The import requires the name of the exported C function from the library</li>
                                    </ul>
                                    <p>&#160;</p>
                                    <table style="mc-table-style: url('../../TableStyles/table2.css');" class="TableStyle-table2" cellspacing="2">
                                        <tbody>
                                            <tr class="TableStyle-table2-Body-Body1">
                                                <th class="TableStyle-table2-BodyE-Column1-Body1"><a name="Table"></a>Network Type</th>
                                                <th class="TableStyle-table2-BodyE-Column1-Body1">Header File</th>
                                                <th class="TableStyle-table2-BodyE-Column1-Body1">Link Symbol Name</th>
                                                <th class="TableStyle-table2-BodyE-Column1-Body1">Signature f the C Function</th>
                                                <th class="TableStyle-table2-BodyD-Column1-Body1">Arguments to call the Function</th>
                                            </tr>
                                            <tr class="TableStyle-table2-Body-Body1">
                                                <td class="TableStyle-table2-BodyE-Column1-Body1">CAN</td>
                                                <td class="TableStyle-table2-BodyE-Column1-Body1">vNetCanInterface.h</td>
                                                <td class="TableStyle-table2-BodyE-Column1-Body1">vNetCan_getInterface</td>
                                                <td class="TableStyle-table2-BodyE-Column1-Body1">const vNetCan_interface* (*vNetCan_getInterface_t)(uint32_t version)</td>
                                                <td class="TableStyle-table2-BodyD-Column1-Body1">Interface version, at the moment 0x01000000</td>
                                            </tr>
                                            <tr class="TableStyle-table2-Body-Body1">
                                                <td class="TableStyle-table2-BodyE-Column1-Body1">Ethernet</td>
                                                <td colspan="1" class="TableStyle-table2-BodyE-Column1-Body1">
                                                    <p class="table_default">vNetAutoEthernetInterface.h</p>
                                                </td>
                                                <td class="TableStyle-table2-BodyE-Column1-Body1">vNetAutoEthernet_getInterface</td>
                                                <td class="TableStyle-table2-BodyE-Column1-Body1">const vNetAutoEthernet_interface* (*vNetAutoEthernet_getInterface_t)(uint32_t version)</td>
                                                <td colspan="1" class="TableStyle-table2-BodyD-Column1-Body1">Interface version, at the moment 0x01000000</td>
                                            </tr>
                                            <tr class="TableStyle-table2-Body-Body1">
                                                <td class="TableStyle-table2-BodyB-Column1-Body1">FkexRay</td>
                                                <td colspan="1" class="TableStyle-table2-BodyB-Column1-Body1">vNetCanInterface.h</td>
                                                <td class="TableStyle-table2-BodyB-Column1-Body1">vNetFlexRay_getInterface</td>
                                                <td class="TableStyle-table2-BodyB-Column1-Body1">const vNetFlexRay_interface* (*vNetFlexRay_getInterface_t)(uint32_t version)</td>
                                                <td colspan="1" class="TableStyle-table2-BodyA-Column1-Body1">Interface version, at the moment 0x01000000</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                    <p>Note that the shared library file must be found by the OS API call to load the shared library</p>
                                    <ul>
                                        <li class="list">On Windows, by extending the value of the PATH&#160;Environment Variable</li>
                                        <li class="list">On Linux, by extending the value of LD_LIBRARY_PATH (or by putting ESSE libraries in a standard directory)</li>
                                        <li>On Windows or Linux by providing the Full Path name as the location of the vNet library</li>
                                    </ul>
                                    <h4>Example (C code)</h4>
                                    <h5>Getting Symbols from Shared Library</h5>
                                    <div class="codeSnippet"><a class="codeSnippetCopyButton" role="button" href="javascript:void(0);">Copy</a>
                                        <div class="codeSnippetCaption">
                                        </div>
                                        <div style="mc-code-lang: CPP;" class="codeSnippetBody" data-mc-continue="False" data-mc-line-number-start="1" data-mc-use-line-numbers="False"><pre><code>FARPROC <span style="color: #795da3; font-weight: bold; ">getSharedLibrarySymbol</span><span style="color: #000000; ">(</span>HMODULE module<span style="color: #000000; ">,</span> <span style="color: #795da3; font-weight: bold; ">const</span> <span style="color: #a71d5d; ">char</span><span style="color: #000000; ">*</span> <span style="color: #795da3; font-weight: bold; ">const</span> symbolName<span style="color: #000000; ">)</span><br /><span style="color: #000000; ">{</span><br />&#160;&#160;&#160;&#160;<span style="color: #a71d5d; ">return</span> <span style="color: #795da3; font-weight: bold; ">GetProcAddress</span><span style="color: #000000; ">(</span>module<span style="color: #000000; ">,</span> symbolName<span style="color: #000000; ">);</span><br /><span style="color: #000000; ">}</span><br />&#160;<br /><span style="color: #969896; ">// load the vNetInterface.dll</span><br />HMODULE libhandle <span style="color: #000000; ">=</span> <span style="color: #795da3; font-weight: bold; ">openSharedLibrary</span><span style="color: #000000; ">();</span><br />&#160;<br /><span style="color: #969896; ">// get the connection ports of the CAN/CAN-FD networks</span><br />vNetCan_getInterface_t pGetInterface <span style="color: #000000; ">=</span> <span style="color: #000000; ">(</span>vNetCan_getInterface_t<span style="color: #000000; ">)</span> <span style="color: #795da3; font-weight: bold; ">getSharedLibrarySymbol</span><span style="color: #000000; ">(</span>libhandle<span style="color: #000000; ">,</span> <span style="color: #df5000; ">"vNetCan_getInterface"</span><span style="color: #000000; ">);</span><br />vNetCan_interface<span style="color: #000000; ">*</span> canVNet <span style="color: #000000; ">=</span> <span style="color: #795da3; font-weight: bold; ">pGetInterface</span><span style="color: #000000; ">(</span>vNetCanInterfaceVersion<span style="color: #000000; ">);</span><br />&#160;<br /><span style="color: #969896; ">// get the connection ports of the FlexRay networks</span><br />vNetFlexRay_getInterface_t pGetInterface <span style="color: #000000; ">=</span> <span style="color: #000000; ">(</span>vNetFlexRay_getInterface_t<span style="color: #000000; ">)</span> <span style="color: #795da3; font-weight: bold; ">getSharedLibrarySymbol</span><span style="color: #000000; ">(</span>libhandle<span style="color: #000000; ">,</span> <span style="color: #df5000; ">"vNetFlexRay_getInterface"</span><span style="color: #000000; ">);</span><br />vNetFlexRay_interface<span style="color: #000000; ">*</span> flexRayVNet <span style="color: #000000; ">=</span> <span style="color: #795da3; font-weight: bold; ">pGetInterface</span><span style="color: #000000; ">(</span>vNetFlexRayInterfaceVersion<span style="color: #000000; ">);</span><br />&#160;<br /><span style="color: #969896; ">// get the connection ports of the Automotive Ethernet networks</span><br />vNetAutoEthernet_getInterface_t pGetInterface <span style="color: #000000; ">=</span> <span style="color: #000000; ">(</span>vNetAutoEthernet_getInterface_t<span style="color: #000000; ">)</span> <span style="color: #795da3; font-weight: bold; ">getSharedLibrarySymbol</span><span style="color: #000000; ">(</span>libhandle<span style="color: #000000; ">,</span> <span style="color: #df5000; ">"vNetAutoEthernet_getInterface"</span><span style="color: #000000; ">);</span><br />vNetAutoEthernet_interface<span style="color: #000000; ">*</span> autoEthVNet <span style="color: #000000; ">=</span> <span style="color: #795da3; font-weight: bold; ">pGetInterface</span><span style="color: #000000; ">(</span>vNetAutoEthernetInterfaceVersion<span style="color: #000000; ">);</span></code></pre>
                                        </div>
                                    </div>
                                    <h3>VNet Interface Structure</h3>
                                    <p>Note that different C structures exist for all three bus types. The following structures exist:</p>
                                    <ul>
                                        <li>vNetCan_interface</li>
                                        <li>vNetAutoEthernet_interface</li>
                                        <li>vNetFlexRay_interface</li>
                                    </ul>
                                    <p>As mentioned above there is no common base structure for them. However, all three interfaces objects have the same binary structure comprising</p>
                                    <ul>
                                        <li class="list">Member variables such as mVersion</li>
                                        <li class="list">Member function pointers</li>
                                        <li class="list">Order of members</li>
                                        <li class="list">Signatures of the functions the function pointers point to</li>
                                    </ul>
                                    <p>Note that the approach chosen is a pure C approach: Each vNet interface object is a C struct with C function pointers as members. If you are familiar with C++ you might find this approach a bit similar to C++ classes with a virtual function table.</p>
                                    <h3>VNet Ports</h3>
                                    <p>vNet allows to open several ports (network interfaces) in each model:</p>
                                    <ul>
                                        <li class="list">Each port is an interface to an  ETAS Virtual Network</li>
                                        <li class="list">Each port has a name which is defined as alias name in the XML configuration file. The list of all configured port names in a model can be queried by calling mGetAllPortNames()</li>
                                        <li class="list">The model has to know which of the ports it wants to open, it must know its own port name in advance (in simple cases it might be sufficient to use the first port name returned by mGetAllPortNames())</li>
                                        <li class="list">One single model can have many ports, either to the same or to different networks</li>
                                        <li>If the application process contains many individual models one port can be shared by several models</li>
                                        <li class="list">Most of the functions in the vNet API are related to ports<ul><li class="list2">mOpenPort() is the first function to call, it returns a port handle</li><li class="list2">all subsequent function calls related to that port require its handle as argument</li><li class="list2">mOpenPort() also requires a port configuration which is different for each network type, details re described below</li></ul></li>
                                        <li class="list">Each port must be stepped correctly by calling mPreStepPort() and mPostStepPort()</li>
                                        <li class="list">If the stepping is not correct (wrong rate, wrong points of time) the simulation results will be probably wrong:<ul><li class="list2">networks could have different virtual times</li><li class="list2">the simulation can freeze</li></ul></li>
                                    </ul>
                                    <h5>Getting all vNet port names</h5>
                                    <p class="paragraph">The following example shows how to get the name of the own network interface (port) defined in the XML configuration file:</p>
                                    <div class="codeSnippet"><a class="codeSnippetCopyButton" role="button" href="javascript:void(0);">Copy</a>
                                        <div style="mc-code-lang: CPP;" class="codeSnippetBody" data-mc-continue="False" data-mc-line-number-start="1" data-mc-use-line-numbers="False"><pre><code><span style="color: #969896; ">// get all Ethernet port names</span><br /><span style="color: #a71d5d; font-weight: bold; ">auto</span> pPortNames <span style="color: #000000; ">=</span> autoEthVNet<span style="color: #000000; ">-&gt;</span><span style="color: #795da3; font-weight: bold; ">mGetAllPortNames</span><span style="color: #000000; ">();</span><br />&#160;<br /><span style="color: #969896; ">//get the alias name of the own interface as defined in XML configuration</span><br /><span style="color: #a71d5d; ">char</span><span style="color: #000000; ">*</span> portName <span style="color: #000000; ">=</span> pPortNames<span style="color: #000000; ">[</span>myInterfaceIndex<span style="color: #000000; ">];</span></code></pre>
                                        </div>
                                    </div>
                                    <h3>VNet Port Configuration</h3>
                                    <p>Each call to mOpenPort() port requires a port configuration as argument:</p>
                                    <ul>
                                        <li class="list">A port configuration is composed of one or more data structures which contain the basic configuration of the network interface<ul><li class="list2">Addresses (e. g. MAC addresses, VLAN tags)</li><li class="list2">Flags enabling or disabling certain features of the interface</li><li class="list2">Interface-dependent timing parameters</li></ul></li>
                                        <li class="list" style="font-weight: bold;"><span style="font-weight: normal;">Not all of the configuration data need to be initialized</span>
                                        </li>
                                        <li class="list">mOpenPort() is able to fill some configuration variables with initial values from the global configuration file</li>
                                    </ul>
                                    <p><b>Example:</b> If the member variable <span class="code">mStepsPerSecond</span> is initialized with -1 the function <span class="code">mOpenPort()</span> will replace the value -1 by the configured value from the XML configuration file.</p>
                                    <ul>
                                        <li>Details about CAN port configuration can be found at <a href="vNet CAN.htm" class="MCXref xref">VNET CAN</a></li>
                                        <li>Details about Automotive Ethernet port configuration can be found at <a href="vNet Ethernet.htm" class="MCXref xref">vNet Ethernet</a> .</li>
                                        <li>Details about FlexRay port configuration can be found at <a href="vNet FlexRay.htm" class="MCXref xref">vNet FlexRay</a>.</li>
                                    </ul>
                                    <h3>Creating vNet Ports</h3>
                                    <p>After setting up a port configuration we can open the port. This task is very similar for all types of networks, so we describe it here. The main differences result from the number and type of configuration structures.</p>
                                    <p>The following table describes which data structures are required to initialize ports using <span class="code">mOpenPort()</span>:</p>
                                    <table style="mc-table-style: url('../../TableStyles/table2.css');" class="TableStyle-table2" cellspacing="2">
                                        <col style="width: 90px;" class="TableStyle-table2-Column-Column1" />
                                        <col style="width: 553px;" class="TableStyle-table2-Column-Column1" />
                                        <tbody>
                                            <tr class="TableStyle-table2-Body-Body1">
                                                <th class="TableStyle-table2-BodyE-Column1-Body1">
                                                    <p class="table_default">Network type</p>
                                                </th>
                                                <th class="TableStyle-table2-BodyD-Column1-Body1">
                                                    <p class="table_default">Configuration arguments for <span class="code">mOpenPort()</span></p>
                                                </th>
                                            </tr>
                                            <tr class="TableStyle-table2-Body-Body1">
                                                <td class="TableStyle-table2-BodyE-Column1-Body1">Ethernet</td>
                                                <td class="TableStyle-table2-BodyD-Column1-Body1">
                                                    <p class="table_default"><span class="code">char* portName, vNetAutoEthernetPortConfig* aethCfg,</span>
                                                    </p>
                                                    <p class="table_default"><span class="code">void* pVendorConfig,</span>
                                                    </p>
                                                    <p class="table_default"><span class="code">vNetAutoEthernetMacAddress* pMacAddr</span>
                                                    </p>
                                                </td>
                                            </tr>
                                            <tr class="TableStyle-table2-Body-Body1">
                                                <td class="TableStyle-table2-BodyE-Column1-Body1">CAN</td>
                                                <td class="TableStyle-table2-BodyD-Column1-Body1">
                                                    <p class="table_default"><span class="code">char* portName,</span>
                                                    </p>
                                                    <p class="table_default"><span class="code">vNetCanGlobalConfig* canCfg,</span>
                                                    </p>
                                                    <p class="table_default"><span class="code">void* pVendorConfig</span>
                                                    </p>
                                                </td>
                                            </tr>
                                            <tr class="TableStyle-table2-Body-Body1">
                                                <td class="TableStyle-table2-BodyB-Column1-Body1">FlexRay</td>
                                                <td class="TableStyle-table2-BodyA-Column1-Body1">
                                                    <p class="table_default"><span class="code">char* portName,</span>
                                                    </p>
                                                    <p class="table_default"><span class="code">vNetFlexRayGlobalConfig flxGloablCfg*,</span>
                                                    </p>
                                                    <p class="table_default"><span class="code">vNetFlexRayLocalConfig* flxLocalCfg,</span>
                                                    </p>
                                                    <p class="table_default"><span class="code">void* pVendorConfig</span>
                                                    </p>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                    <table style="width: 100%;mc-table-style: url('../../TableStyles/note.css');" class="TableStyle-note" cellspacing="0">
                                        <col class="TableStyle-note-Column-Column1" />
                                        <thead>
                                            <tr class="TableStyle-note-Head-Header1">
                                                <th class="TableStyle-note-HeadD-Column1-Header1">
                                                    <p class="note_Header" data-mc-autonum="Note"><span class="autonumber"><span>Note</span></span>&#160;</p>
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr class="TableStyle-note-Body-Body1">
                                                <td class="TableStyle-note-BodyA-Column1-Body1">
                                                    <p class="table_default">Since interface configuration is highly dependent on the network type, the signatures of <span class="code">mOpenPort()</span> are different for each network type. This is reasonable because e. g. CAN interfaces do not require any special configuration. In contrast to CAN, FlexRay interfaces need numerous configuration parameters for both, the global network and the local interface being configured. In the case of Ethernet the primary MAC address is required in addition.</p>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                    <h4>Opening a vNet port</h4>
                                    <div class="codeSnippet"><a class="codeSnippetCopyButton" role="button" href="javascript:void(0);">Copy</a>
                                        <div style="mc-code-lang: CPP;" class="codeSnippetBody" data-mc-continue="False" data-mc-line-number-start="1" data-mc-use-line-numbers="False"><pre><code><span style="color: #969896; ">// retrieve a CAN/CAN-FD port handle</span><br />vNetCanHandle<span style="color: #000000; ">*</span> pPortHandle <span style="color: #000000; ">=</span> vNetIf<span style="color: #000000; ">-&gt;</span><span style="color: #795da3; font-weight: bold; ">mOpenPort</span><span style="color: #000000; ">(</span>portName<span style="color: #000000; ">,</span> <span style="color: #000000; ">&amp;</span>canCfg<span style="color: #000000; ">,</span> <span style="color: #000000; font-weight: bold; ">nullptr</span><span style="color: #000000; ">);</span><br />&#160;<br /><span style="color: #969896; ">// retrieve a Flexray port handle</span><br />vNetFlexRayHandle<span style="color: #000000; ">*</span> pPortHandle <span style="color: #000000; ">=</span> vNetIf<span style="color: #000000; ">-&gt;</span><span style="color: #795da3; font-weight: bold; ">mOpenPort</span><span style="color: #000000; ">(</span>portName<span style="color: #000000; ">,</span> <span style="color: #000000; ">&amp;</span>flxGlobalCfg<span style="color: #000000; ">,</span> <span style="color: #000000; ">&amp;</span>flxLocalCfg<span style="color: #000000; ">,</span> <span style="color: #000000; font-weight: bold; ">nullptr</span><span style="color: #000000; ">);</span><br />&#160;<br /><span style="color: #969896; ">// retrieve the port handle for the Automotive Ethernet port with the index myInterfaceIndex</span><br />vNetAutoEthernetHandle<span style="color: #000000; ">*</span> pPortHandle <span style="color: #000000; ">=</span> vNetIf<span style="color: #000000; ">-&gt;</span><span style="color: #795da3; font-weight: bold; ">mOpenPort</span><span style="color: #000000; ">(</span>portName<span style="color: #000000; ">,</span> aethCfg<span style="color: #000000; ">,</span> <span style="color: #000000; font-weight: bold; ">nullptr</span><span style="color: #000000; ">,</span> <span style="color: #000000; ">&amp;</span>aethCfg<span style="color: #000000; ">[</span>myInterfaceIndex<span style="color: #000000; ">]-&gt;</span>mSrcMacAdr<span style="color: #000000; ">);</span><br />&#160;<br /><span style="color: #969896; ">// start the port</span><br />pTable<span style="color: #000000; ">-&gt;</span><span style="color: #795da3; font-weight: bold; ">mStartPort</span><span style="color: #000000; ">(</span>pPortHandle<span style="color: #000000; ">);</span></code></pre>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div><a data-close="true"></a>
                </div>
            </div>
        </div>
    </body>
</html>