<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="_Skins_HTML5_Side" lang="en" xml:lang="en" data-mc-search-type="Stem" data-mc-help-system-file-name="COSYM_Online_Help.xml" data-mc-path-to-help-system="../../../" data-mc-has-content-body="True" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Virtual Networks">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="msapplication-config" content="../../../Skins/Favicons/browserconfig.xml" />
        <link rel="shortcut icon" href="../../../Skins/Favicons/favicon_3.ico" />
        <link rel="icon" sizes="16x16" href="../../../Skins/Favicons/favicon_2.ico" />
        <link rel="icon" sizes="16x16" href="../../../Skins/Favicons/favicon_1.ico" />
        <link rel="icon" sizes="16x16" href="../../../Skins/Favicons/favicon.ico" />
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Fluid/Stylesheets/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" /><title>vNet Ethernet</title>
        <link href="../../Stylesheets/ETAS_flare_EN.css" rel="stylesheet" type="text/css" />
        <meta name="Product" content="COSYM" />
        <meta name="Version" content="V3.4.1" />
        <meta name="Revision" content="R01 EN - 05.2024" />
        <meta name="Copyright Year" content="2024" />
        <meta name="Doc Type" content="User Guide" />
        <script src="../../Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Scripts/foundation.6.2.3_custom.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Scripts/MadCapAll.js" type="text/javascript" defer="defer">
        </script>
    </head>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-left" role="navigation" id="offCanvas" data-off-canvas="" data-position="left" data-mc-ignore="true">
                    <ul class="off-canvas-accordion vertical menu off-canvas-list" data-accordion-menu="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div data-sticky-container="" class="title-bar-container">
                        <nav class="title-bar tab-bar sticky" role="banner" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="only screen and (max-width: 1279px)" data-mc-ignore="true"><a class="skip-to-content fluid-skip showOnFocus" href="#">Skip To Main Content</a>
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <div class="central-account-wrapper">
                                        <div class="central-dropdown"><a class="central-account-drop"><span class="central-account-image"></span><span class="central-account-text">Account</span></a>
                                            <div class="central-dropdown-content"><a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                                                <hr class="central-separator" /><a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                                            </div>
                                        </div>
                                    </div>
                                    <button class="menu-icon" aria-label="Show Navigation Panel" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../Help.htm" alt="Logo"></a>
                                </div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" role="navigation" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                        </li>
                                    </ul>
                                </div>
                                <div class="central-account-wrapper">
                                    <div class="central-dropdown"><a class="central-account-drop"><span class="central-account-image"></span><span class="central-account-text">Account</span></a>
                                        <div class="central-dropdown-content"><a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                                            <hr class="central-separator" /><a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                                        </div>
                                    </div>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie">
                                                <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search" />
                                                <div class="search-filter-wrapper"><span class="invisible-label" id="search-filters-label">Filter: </span>
                                                    <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                                    </div>
                                                    <div class="search-filter-content" id="sf-content">
                                                        <ul>
                                                            <li>
                                                                <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001"><span id="filterSelectorLabel-00001">All Files</span>
                                                                </button>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Search" role="button" tabindex="0"><span class="invisible-label">Submit Search</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <div class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <nav class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </nav>
                            <div class="body-container">
                                <div id="mc-main-content" role="main" data-mc-content-body="True">
                                    <h2>vNet Ethernet</h2>
                                    <p>In general to apply all vNet interfaces, the facts are explained in "vNet Basics" <a href="vNet Basics and example usage with ESSE Virtual Networks.htm" class="PageNum MCXref xref xrefPageNum">vNet Basics and example usage with  ETAS Virtual Networks</a>. This page aims at outlining the differences between the individual network types and the ESSE implementations of virtual networks.</p>
                                    <p class="paragraph">The header file used by VNET&#160;FlexRay: <span class="code">vNetAutoEthernetInterface.h</span>.</p>
                                    <h3>Ethernet Facts</h3>
                                    <ul>
                                        <li>In contrast to CAN networks Ethernet uses addresses to direct frames to desired recipients</li>
                                        <li>Ethernet addresses are also called MAC addresses and are composed of 6 bytes</li>
                                        <li>A special case are multicast addresses - they allow a frame to be received by all interfaces which share the same multicast MAC address</li>
                                        <li>Hence, each Ethernet interface may have several MAC addresses assigned to it - the original MAC address, possibly further MAC addresses and several multicast MAC addresses</li>
                                        <li>A broadcast MAC address is a special case - a frame addressed to a broadcast address is received by all interfaces, the broadcast address doesn't need to be configured, every interface shall know it</li>
                                        <li>Since every Ethernet interface is permanently listening on the wire it is in principle capable of receiving all frames on the sub-net, not only those addressed to it (promiscuous mode)</li>
                                        <li>But every Ethernet interface has filters which filter the network traffic and simply ignore Ethernet messages addressed to other hosts</li>
                                        <li>Automotive Ethernet also requires the support of VLANs</li>
                                        <li>VLANs is a means to divide an Ethernet network into several virtual sub-networks</li>
                                        <li>The separation into sub-networks is done by extending Ethernet frame headers by VLAN IDs (and some more data not discussed here)</li>
                                        <li>Each frame with a VLAN ID X is received only by Ethernet interfaces which have been configured to have the VLAN ID X</li>
                                        <li>Every Ethernet interface can be assigned many VLAN IDs so each interface may be part of many VLANs</li>
                                        <li>VLANs also need to be supported by switches</li>
                                    </ul>
                                    <h3>ESSE Virtual Automotive Ethernet Facts</h3>
                                    <p>The ESSE implementation of virtual Automotive Ethernet supports simulations of the logical bus behaviour on ISO/OSI layer 2. It doesn't simulate the transmission of voltage levels but the transmission of frames.</p>
                                    <p>It supports:</p>
                                    <ul>
                                        <li>Standard Ethernet frames with standard headers</li>
                                        <li>The common MTU of 1500 bytes</li>
                                        <li>VLAN header extension with VLAN ID, priority</li>
                                        <li>Arbitrary number of Ethernet networks with individual stepping rates</li>
                                        <li>Arbitrary number of Ethernet interfaces connected to each network</li>
                                        <li>Arbitrary number of MAC addresses configured for each interface</li>
                                        <li>Arbitrary number of VLAN IDs configured for each interface</li>
                                        <li>Additional filters can be configured for each interface to decide which frames will be accepted and which will be rejected by the interface</li>
                                        <li>Self-reception of frames (internal loopback)</li>
                                    </ul>
                                    <h3>Ethernet Model</h3>
                                    <ul>
                                        <li>The basic assumption of the  ETAS Virtual Network is a <b>single-wire model</b></li>
                                        <li>The single-wire model assumes that all interfaces are connected to one Ethernet segment and thus <b>compete for access to one wire</b></li>
                                        <li class="list">This assumption leads to a conservative limitation of the number of bytes that can be transmitted per second</li>
                                        <li class="list">The single-wire model totally ignores the possibility of duplex transmissions, bridges and switches connected to the network</li>
                                        <li class="list">The model also ignores the possibility of different network latencies due to cable lengths, switches, bridges, switching policies and queuing priorities</li>
                                        <li class="list">So the assumption is that all frames are transmitted with the same minimum latency, and that network latency is further dependent on the competing network traffic</li>
                                        <li class="list">According to the information presented in  ETAS Virtual Networks the earliest the ESSE Ethernet implementation receives frames into a model is in the next simulation step</li>
                                        <li class="list">So the minimum latency of frame transmission across models is dependent on the stepping rate - an Ethernet network with a stepping rate of 1000 steps per second (1ms per step) will transmit all frames with a minimum delay of 1ms across models</li>
                                        <li class="list">Despite the single-wire model there is no CSMA/CD arbitration in the simulated network</li>
                                        <li class="list">The only arbitration is that a limited number of bits can be transmitted in each simulation step and thus messages that touch this limit are held for transmission in a later network step</li>
                                        <li class="list">There is also currently a limit to the number of transmission requests a model(s) can make within one simulation step. This limit will be addressed and removed in the next development cycle (Q1 2020).</li>
                                    </ul>
                                    <h3>Initialization Example</h3>
                                    <p>The following code snippet shows the creation of an Ethernet interface. This has been discussed on a more abstract level in "vNet Basics" <a href="vNet Basics and example usage with ESSE Virtual Networks.htm" class="PageNum MCXref xref xrefPageNum">vNet Basics and example usage with  ETAS Virtual Networks</a>.</p>
                                    <p>The function openSharedLibrary() mentioned below has two different implementations for Windows and Linux as dynamic loading is highly dependent on the operating system.</p>
                                    <h5>AE vNet Code Example</h5>
                                    <div class="codeSnippet"><a class="codeSnippetCopyButton" role="button" href="javascript:void(0);">Copy</a>
                                        <div style="mc-code-lang: CPP;" class="codeSnippetBody" data-mc-continue="False" data-mc-line-number-start="1" data-mc-use-line-numbers="False"><pre><code>constexpr <span style="color: #795da3; font-weight: bold; ">static</span> <span style="color: #795da3; font-weight: bold; ">const</span> <span style="color: #a71d5d; ">char</span><span style="color: #000000; ">*</span> dllImportFunc <span style="color: #000000; ">=</span> <span style="color: #df5000; ">"vNetAutoEthernet_getInterface"</span><span style="color: #000000; ">;</span><br /><span style="color: #969896; ">#ifdef WIN32</span><br />&#160;&#160;&#160;&#160;constexpr <span style="color: #795da3; font-weight: bold; ">static</span> <span style="color: #795da3; font-weight: bold; ">const</span> <span style="color: #a71d5d; ">char</span><span style="color: #000000; ">*</span> dllName <span style="color: #000000; ">=</span> <span style="color: #df5000; ">"vNetInterfaceSnf.dll"</span><span style="color: #000000; ">;</span><br /><span style="color: #969896; ">#else //Linux</span><br />&#160;&#160;&#160;&#160;constexpr <span style="color: #795da3; font-weight: bold; ">static</span> <span style="color: #795da3; font-weight: bold; ">const</span> <span style="color: #a71d5d; ">char</span><span style="color: #000000; ">*</span> dllName <span style="color: #000000; ">=</span> <span style="color: #df5000; ">"libvNetInterfaceSnf.so"</span><span style="color: #000000; ">;</span><br /><span style="color: #969896; ">#endif</span><br />&#160;<br />&#160;&#160;&#160;&#160;constexpr <span style="color: #795da3; font-weight: bold; ">static</span> <span style="color: #a71d5d; font-weight: bold; ">int</span> errorBufferSize <span style="color: #000000; ">=</span> <span style="color: #df5000; ">1024</span><span style="color: #000000; ">;</span><br />&#160;&#160;&#160;&#160;constexpr <span style="color: #795da3; font-weight: bold; ">static</span> <span style="color: #a71d5d; font-weight: bold; ">int</span> ecuIndex <span style="color: #000000; ">=</span> <span style="color: #df5000; ">0</span><span style="color: #000000; ">;</span><br />&#160;&#160;&#160;&#160;<span style="color: #a71d5d; ">char</span> errorBuffer<span style="color: #000000; ">[</span>errorBufferSize<span style="color: #000000; ">];</span><br />&#160;<br />&#160;&#160;&#160;&#160;<span style="color: #969896; ">//Prepare and setup vNet interface</span><br />&#160;&#160;&#160;&#160;<span style="color: #969896; ">//dynamic loading of a shared library</span><br />&#160;&#160;&#160;&#160;<span style="color: #a71d5d; font-weight: bold; ">auto</span> libraryHandle <span style="color: #000000; ">=</span> <span style="color: #795da3; font-weight: bold; ">openSharedLibrary</span><span style="color: #000000; ">(</span>dllName<span style="color: #000000; ">,</span> errorBufferSize<span style="color: #000000; ">,</span> errorBuffer<span style="color: #000000; ">);</span><br />&#160;<br />&#160;&#160;&#160;&#160;<span style="color: #969896; ">//dynamic linking of the factory function</span><br />&#160;&#160;&#160;&#160;vNetAutoEthernet_getInterface_t pGetInterface <span style="color: #000000; ">=</span> <span style="color: #000000; ">(</span>vNetAutoEthernet_getInterface_t<span style="color: #000000; ">)</span> <span style="color: #795da3; font-weight: bold; ">getSharedLibrarySymbol</span><span style="color: #000000; ">(</span>libraryHandle<span style="color: #000000; ">,</span> dllImportFunc<span style="color: #000000; ">);</span><br />&#160;<br />&#160;&#160;&#160;&#160;<span style="color: #969896; ">//get the vNet interface object</span><br />&#160;&#160;&#160;&#160;<span style="color: #a71d5d; font-weight: bold; ">auto</span> vNetInterface <span style="color: #000000; ">=</span> <span style="color: #795da3; font-weight: bold; ">pGetInterface</span><span style="color: #000000; ">(</span>vNetAutoEthernetInterfaceVersion<span style="color: #000000; ">);</span></code></pre>
                                        </div>
                                    </div>
                                    <h3>Configuration</h3>
                                    <p>As described in <a href="vNet Basics and example usage with ESSE Virtual Networks.htm" class="MCXref xref">vNet Basics and example usage with  ETAS Virtual Networks</a> the configuration of ports is highly dependent on the network type. The configuration of an Ethernet network interface is done by providing a valid port configuration to <span class="code">mOpenPort()</span>.</p>
                                    <p class="paragraph">In contrast to other networks Ethernet ports require address information, MAC addresses and VLAN IDs:</p>
                                    <ul>
                                        <li>Primary MAC address passed to<span class="code"> mOpenPort()</span></li>
                                        <li>Additional MAC addresses e. g. for MAC multicast<ul><li class="list2">either configured in <span class="code">vNetAutoEthernetPortConfig</span></li><li class="list2">or added after <span class="code">mOpenPort() </span>via <span class="code">mAddDestMacAdrFilter()</span></li></ul></li>
                                        <li>VLAN tags<ul><li class="list2">either configured in<span class="code"> vNetAutoEthernetPortConfig</span></li><li class="list2">or added after <span class="code">mOpenPort() </span>via <span class="code">mAddVlanIdFilter()</span></li></ul></li>
                                    </ul>
                                    <p>The structure is named <span class="code">vNetAutoEthernetPortConfig </span>and defined in <span class="code">vNetAutoEthernetInterface.h</span>. It must contains the following data:</p>
                                    <ul>
                                        <li>The maximum baud rate of the ports connection to the vNet or -1</li>
                                        <li>The source MAC address of the port</li>
                                        <li>Zero or more VLAN IDs received by this port</li>
                                        <li>Zero or more Multicast MAC addresses received by this port.</li>
                                    </ul>
                                    <p>Note that it is also possible to perform some configuration tasks dynamically <b>after calling</b> <span class="code">mOpenPort()</span> and while the simulation is running:</p>
                                    <ul>
                                        <li><span class="code">mAddDestMacAdrFilter()</span> adds an additional multicast MAC address to the interface</li>
                                        <li><span class="code">mAddVlanIdFilter()</span> adds a VLAN ID to the interface</li>
                                    </ul>
                                    <p>Both dynamic configuration possibilities are required because <b>multicast group configuration</b> is usually dynamic and cannot be anticipated before creating the interface.</p>
                                    <p>So when an interface wants to join an IP multicast group with a <i>multicast IPv4 address</i> the corresponding<span class="italic"> multicast MAC address </span>needs to be added to the interface <b>at runtime</b>.</p>
                                    <p>As an example a port configuration for 2 is constructed in the following code snipped:</p>
                                    <h5>Ethernet Port Configuration</h5>
                                    <div class="codeSnippet"><a class="codeSnippetCopyButton" role="button" href="javascript:void(0);">Copy</a>
                                        <div style="mc-code-lang: CPP;" class="codeSnippetBody" data-mc-continue="False" data-mc-line-number-start="1" data-mc-use-line-numbers="False"><pre><code><span style="color: #969896; ">// configuration of a list of two Automotive Ethernet ports</span><br />vNetAutoEthernetPortConfig<span style="color: #000000; ">*</span> aethCfg<span style="color: #000000; ">[]</span> <span style="color: #000000; ">=</span> <span style="color: #000000; ">{</span><span style="color: #000000; font-weight: bold; ">nullptr</span><span style="color: #000000; ">,</span> <span style="color: #000000; font-weight: bold; ">nullptr</span><span style="color: #000000; ">,</span> <span style="color: #000000; font-weight: bold; ">nullptr</span> <span style="color: #000000; ">};</span><br />&#160;<br /><span style="color: #795da3; font-weight: bold; ">static</span> int32_t vlanIdsPort1<span style="color: #000000; ">[]</span> <span style="color: #000000; ">=</span> <span style="color: #000000; ">{</span> <span style="color: #df5000; ">2</span><span style="color: #000000; ">,</span> <span style="color: #df5000; ">3</span> <span style="color: #000000; ">};</span><br />&#160;<br />aethCfg<span style="color: #000000; ">[</span><span style="color: #df5000; ">0</span><span style="color: #000000; ">]</span> <span style="color: #000000; ">=</span> <span style="color: #a71d5d; font-weight: bold; ">new</span> <span style="color: #795da3; font-weight: bold; ">vNetAutoEthernetPortConfig</span><span style="color: #000000; ">();</span><br />aethCfg<span style="color: #000000; ">[</span><span style="color: #df5000; ">0</span><span style="color: #000000; ">]-&gt;</span>mStepsPerSecond <span style="color: #000000; ">=</span> <span style="color: #df5000; ">1000</span><span style="color: #000000; ">;</span><br />aethCfg<span style="color: #000000; ">[</span><span style="color: #df5000; ">0</span><span style="color: #000000; ">]-&gt;</span>maxSpeed <span style="color: #000000; ">=</span> evNetAutoEthernetAuto100M<span style="color: #000000; ">;</span><br />aethCfg<span style="color: #000000; ">[</span><span style="color: #df5000; ">0</span><span style="color: #000000; ">]-&gt;</span>mSrcMacAdr <span style="color: #000000; ">=</span> <span style="color: #795da3; font-weight: bold; ">vNetAutoEthernetMacAddressEx</span><span style="color: #000000; ">(</span><span style="color: #df5000; ">0x3e</span><span style="color: #000000; ">,</span> <span style="color: #df5000; ">0x1a</span><span style="color: #000000; ">,</span> <span style="color: #df5000; ">0x22</span><span style="color: #000000; ">,</span> <span style="color: #df5000; ">0x01</span><span style="color: #000000; ">,</span> <span style="color: #df5000; ">0x23</span><span style="color: #000000; ">,</span> <span style="color: #df5000; ">0x01</span><span style="color: #000000; ">);</span><br />aethCfg<span style="color: #000000; ">[</span><span style="color: #df5000; ">0</span><span style="color: #000000; ">]-&gt;</span>vlanIdCount <span style="color: #000000; ">=</span> <span style="color: #df5000; ">2</span><span style="color: #000000; ">;</span><br />aethCfg<span style="color: #000000; ">[</span><span style="color: #df5000; ">0</span><span style="color: #000000; ">]-&gt;</span>pVlanId <span style="color: #000000; ">=</span> <span style="color: #000000; ">&amp;</span>vlanIdsPort1<span style="color: #000000; ">[</span><span style="color: #df5000; ">0</span><span style="color: #000000; ">];</span> <span style="color: #969896; ">//the pointer points to the first Id</span><br />&#160;<br /><span style="color: #795da3; font-weight: bold; ">static</span> int32_t vlanIdPort2 <span style="color: #000000; ">=</span> <span style="color: #df5000; ">4</span><span style="color: #000000; ">;</span><br />&#160;<br />aethCfg<span style="color: #000000; ">[</span><span style="color: #df5000; ">1</span><span style="color: #000000; ">]</span> <span style="color: #000000; ">=</span> <span style="color: #a71d5d; font-weight: bold; ">new</span> <span style="color: #795da3; font-weight: bold; ">vNetAutoEthernetPortConfig</span><span style="color: #000000; ">();</span><br />aethCfg<span style="color: #000000; ">[</span><span style="color: #df5000; ">1</span><span style="color: #000000; ">]-&gt;</span>mStepsPerSecond <span style="color: #000000; ">=</span> <span style="color: #df5000; ">5000</span><span style="color: #000000; ">;</span><br />aethCfg<span style="color: #000000; ">[</span><span style="color: #df5000; ">1</span><span style="color: #000000; ">]-&gt;</span>maxSpeed <span style="color: #000000; ">=</span> evNetAutoEthernetAuto1G<span style="color: #000000; ">;</span><br />aethCfg<span style="color: #000000; ">[</span><span style="color: #df5000; ">1</span><span style="color: #000000; ">]-&gt;</span>mSrcMacAdr <span style="color: #000000; ">=</span> <span style="color: #795da3; font-weight: bold; ">vNetAutoEthernetMacAddressEx</span><span style="color: #000000; ">(</span><span style="color: #df5000; ">0x3e</span><span style="color: #000000; ">,</span> <span style="color: #df5000; ">0x1a</span><span style="color: #000000; ">,</span> <span style="color: #df5000; ">0x22</span><span style="color: #000000; ">,</span> <span style="color: #df5000; ">0x01</span><span style="color: #000000; ">,</span> <span style="color: #df5000; ">0x23</span><span style="color: #000000; ">,</span> <span style="color: #df5000; ">0x02</span><span style="color: #000000; ">);</span><br />aethCfg<span style="color: #000000; ">[</span><span style="color: #df5000; ">1</span><span style="color: #000000; ">]-&gt;</span>vlanIdCount <span style="color: #000000; ">=</span> <span style="color: #df5000; ">1</span><span style="color: #000000; ">;</span><br />aethCfg<span style="color: #000000; ">[</span><span style="color: #df5000; ">1</span><span style="color: #000000; ">]-&gt;</span>pVlanId <span style="color: #000000; ">=</span> <span style="color: #000000; ">&amp;</span>vlanIdPort2<span style="color: #000000; ">;</span></code></pre>
                                        </div>
                                    </div>
                                    <h5>Remarks</h5>
                                    <ul>
                                        <li>Note that the array of port configurations must be null-terminated</li>
                                        <li>So it must have 3 pointers for 2 interfaces, the last one is NULL</li>
                                        <li>Note that both ports have different speeds and stepping rates because they will be connected to different networks</li>
                                        <li>Note that as explained before both stepping rates may be initialised to -1 on order to get the stepping rates from the XML configuration</li>
                                        <li>Note that both ports must have different MAC addresses</li>
                                        <li>The first port will belong to two VLANs with IDs 2 and 3</li>
                                        <li>The second port will belong to one VLAN with ID 4</li>
                                    </ul>
                                    <h3>Opening a Port and Additional Configuration</h3>
                                    <p>The following example demonstrates how to open a port using configuration data from the previous snipped and how to extend the configuration after opening the port:</p>
                                    <h5>Configuration of a vNet Ethernet Interface</h5>
                                    <div class="codeSnippet"><a class="codeSnippetCopyButton" role="button" href="javascript:void(0);">Copy</a>
                                        <div style="mc-code-lang: CPP;" class="codeSnippetBody" data-mc-continue="False" data-mc-line-number-start="1" data-mc-use-line-numbers="False"><pre><code><span style="color: #a71d5d; font-weight: bold; ">auto</span> pPortNames <span style="color: #000000; ">=</span> vNetInterface<span style="color: #000000; ">-&gt;</span><span style="color: #795da3; font-weight: bold; ">mGetAllPortNames</span><span style="color: #000000; ">();</span><br />uint8_t addr<span style="color: #000000; ">[]</span> <span style="color: #000000; ">=</span> <span style="color: #000000; ">{</span> <span style="color: #df5000; ">0x11</span><span style="color: #000000; ">,</span> <span style="color: #df5000; ">0x22</span><span style="color: #000000; ">,</span> <span style="color: #df5000; ">0x33</span><span style="color: #000000; ">,</span> <span style="color: #df5000; ">0x44</span><span style="color: #000000; ">,</span> <span style="color: #df5000; ">0x55</span><span style="color: #000000; ">,</span> <span style="color: #df5000; ">0x66</span> <span style="color: #000000; ">};</span><br />vNetAutoEthernetMacAddressEx <span style="color: #795da3; font-weight: bold; ">vNetSrcMac</span><span style="color: #000000; ">(</span> <span style="color: #000000; ">&amp;</span>addr<span style="color: #000000; ">[</span><span style="color: #df5000; ">0</span><span style="color: #000000; ">]</span> <span style="color: #000000; ">);</span><br /><span style="color: #a71d5d; font-weight: bold; ">auto</span> portHandle <span style="color: #000000; ">=</span> vNetInterface<span style="color: #000000; ">-&gt;</span><span style="color: #795da3; font-weight: bold; ">mOpenPort</span><span style="color: #000000; ">(</span>pPortNames<span style="color: #000000; ">[</span>whichPort<span style="color: #000000; ">],</span> <span style="color: #000000; ">&amp;</span>aethCfg<span style="color: #000000; ">[</span>whichPort<span style="color: #000000; ">],</span> <span style="color: #000000; font-weight: bold; ">nullptr</span><span style="color: #000000; ">,</span> <span style="color: #000000; ">&amp;</span>vNetSrcMac<span style="color: #000000; ">);</span><br />vNetInterface<span style="color: #000000; ">-&gt;</span><span style="color: #795da3; font-weight: bold; ">mStartPort</span><span style="color: #000000; ">(</span>portHandle<span style="color: #000000; ">);</span><br />&#160;<br /><span style="color: #969896; ">//as an example add a multicast address to the interface</span><br />uint8_t onesMaskData<span style="color: #000000; ">[]</span> <span style="color: #000000; ">=</span> <span style="color: #000000; ">{</span> <span style="color: #df5000; ">0xff</span><span style="color: #000000; ">,</span> <span style="color: #df5000; ">0xff</span><span style="color: #000000; ">,</span> <span style="color: #df5000; ">0xff</span><span style="color: #000000; ">,</span> <span style="color: #df5000; ">0xff</span><span style="color: #000000; ">,</span> <span style="color: #df5000; ">0xff</span><span style="color: #000000; ">,</span> <span style="color: #df5000; ">0xff</span> <span style="color: #000000; ">};</span><br />uint8_t multiCastAddr<span style="color: #000000; ">[]</span> <span style="color: #000000; ">=</span> <span style="color: #000000; ">{</span> <span style="color: #df5000; ">0x01</span><span style="color: #000000; ">,</span> <span style="color: #df5000; ">0x00</span><span style="color: #000000; ">,</span> <span style="color: #df5000; ">0x5e</span><span style="color: #000000; ">,</span> <span style="color: #df5000; ">0xaa</span><span style="color: #000000; ">,</span> <span style="color: #df5000; ">0xbb</span><span style="color: #000000; ">,</span> <span style="color: #df5000; ">0xcc</span> <span style="color: #000000; ">};</span><br />vNetAutoEthernetMacAddressEx <span style="color: #795da3; font-weight: bold; ">macAddr</span><span style="color: #000000; ">(</span> <span style="color: #000000; ">&amp;</span>multiCastAddr<span style="color: #000000; ">[</span><span style="color: #df5000; ">0</span><span style="color: #000000; ">]</span> <span style="color: #000000; ">);</span><br />vNetAutoEthernetMacAddressEx <span style="color: #795da3; font-weight: bold; ">macAddrMask</span><span style="color: #000000; ">(</span> <span style="color: #000000; ">&amp;</span>onesMaskData<span style="color: #000000; ">[</span><span style="color: #df5000; ">0</span><span style="color: #000000; ">]</span> <span style="color: #000000; ">);</span><br />vNetInterface<span style="color: #000000; ">-&gt;</span><span style="color: #795da3; font-weight: bold; ">mAddDestMacAdrFilter</span><span style="color: #000000; ">(</span>portHandle<span style="color: #000000; ">,</span> <span style="color: #000000; ">&amp;</span>macAddr<span style="color: #000000; ">,</span> <span style="color: #000000; ">&amp;</span>macAddrMask<span style="color: #000000; ">);</span><br />&#160;<br /><span style="color: #969896; ">//add the VLAN ID 7 to the interface</span><br />uint32_t vLanId <span style="color: #000000; ">=</span> <span style="color: #df5000; ">7</span><span style="color: #000000; ">;</span><br />uint32_t vLanIdMask <span style="color: #000000; ">=</span> <span style="color: #df5000; ">0xffffffff</span><span style="color: #000000; ">;</span><br />vNetInterface<span style="color: #000000; ">-&gt;</span><span style="color: #795da3; font-weight: bold; ">mAddVlanIdFilter</span><span style="color: #000000; ">(</span>portHandle<span style="color: #000000; ">,</span> vLanId<span style="color: #000000; ">,</span> vLanIdMask <span style="color: #000000; ">);</span></code></pre>
                                        </div>
                                    </div>
                                    <h5>Remarks</h5>
                                    <ul>
                                        <li>A name must be passed to the port in order to know which interface configuration from the XML configuration file is to be used</li>
                                        <li>The name must be equal to one of the names returned by <span class="code">mGetAllPortNames()</span> which in turn are the alias names from the XML configuration</li>
                                        <li>The name helps in matching the port to be opened with alias names from the XML configuration file</li>
                                        <li>By matching the name <span class="code">mOpenPort()</span> is able to determine the interface to be opened and the network instance it is connected to</li>
                                        <li>In the example above one additional multicast MAC address and one additional VLAN ID are added to the interface</li>
                                    </ul>
                                    <h3>Runtime</h3>
                                    <p>The following facts have to be kept in mind when operating a Ethernet interface at runtime:</p>
                                    <ul>
                                        <li class="list">The function <span class="code">mSendMessage()</span> expects a correctly initialized Ethernet message object</li>
                                        <li class="list">The factory function <span class="code">vNetAutoEthernetMessage</span>; Ex: <span class="code">create()</span> can create the correct Ethernet header based on given addresses, EtherType and the payload</li>
                                        <li class="list">After calling the factory function it is possible to manipulate the raw bytes of the returned frame</li>
                                        <li class="list">The interface doesn't care about the content of the payload</li>
                                        <li class="list">The payload must not be too large - the MTU limit of 1500 (without header) must be respected</li>
                                        <li class="list">The payload must not be too small - the minimum frame size of 64 bytes must be respected</li>
                                        <li class="list">The payload will be padded with additional bytes if it is too short</li>
                                        <li class="list">Correspondingly, the receiver will receive an Ethernet message object including a fully initialized frame header</li>
                                        <li class="list">In the sideband structure of type <span class="code">vNetAutoEthernetSideband</span> the receiver can find the original payload length as provided by the sender - it does not include possible padding bytes</li>
                                    </ul>
                                    <h3>Sending and Receiving of Messages</h3>
                                    <p>Sending of Ethernet messages is straightforward task for which <span class="code">mSendMessage()</span> must be used. Keep in mind that sending is only possible between <span class="code">mPreStep()</span> and <span class="code">mPostStep()</span>.</p>
                                    <p>Note that the actual payload length must be passed as argument to the Ethernet version of <span class="code">mSendMessage()</span></p>
                                    <ul>
                                        <li class="list">For technical reasons frames must respect minimum lengths, e. g. 64 bytes for Ethernet frames</li>
                                        <li class="list">If the sender payload is very small the <b>frame payload must be padded with additional bytes</b> in order to meet the minimum length requirement.</li>
                                        <li class="list">Because of this padding the receiver of the frame won't know the exact size of the sender payload</li>
                                        <li class="list">This problem is solved by providing the RX callback sideband objects as additional arguments</li>
                                        <li class="list">Besides of mPayloadLength each sideband object also contains additional useful information</li>
                                    </ul>
                                    <p>The following figure shows the relationship between frame length, frame paylaod and sender payload:</p>
                                    <p class="paragraph">
                                        <img src="../../Images/vNET/vnet11.png" class="wide" />
                                    </p>
                                    <p>The reception of frames and errors, requires some preparations. In particular, callback functions must be registered. They will be called in the context of <span class="code">mPreStep()</span>.</p>
                                    <h3>Receiving of Ethernet messages</h3>
                                    <div class="codeSnippet"><a class="codeSnippetCopyButton" role="button" href="javascript:void(0);">Copy</a>
                                        <div style="mc-code-lang: CPP;" class="codeSnippetBody" data-mc-continue="False" data-mc-line-number-start="1" data-mc-use-line-numbers="False"><pre><code><span style="color: #969896; ">// receiver callback for Automotive Ethernet messages</span><br /><span style="color: #a71d5d; font-weight: bold; ">int</span> <span style="color: #795da3; font-weight: bold; ">rxMessageCallback</span><span style="color: #000000; ">(</span><span style="color: #795da3; font-weight: bold; ">const</span> vNetAutoEthernetMessage<span style="color: #000000; ">*</span> pMsg<span style="color: #000000; ">,</span> <span style="color: #795da3; font-weight: bold; ">const</span> vNetAutoEthernetSideband<span style="color: #000000; ">*</span> pSideband<span style="color: #000000; ">,</span> vNetEthUserCallbackDataRx<span style="color: #000000; ">*</span> pCallbackData<span style="color: #000000; ">)</span><br /><span style="color: #000000; ">{</span><br />&#160;&#160;&#160;&#160;<span style="color: #969896; ">// Add code here to process received messages, e. g. to store them in a buffer</span><br />&#160;&#160;&#160;&#160;<span style="color: #969896; ">// You might want to use pSideband-&gt;mPayloadLength to communicate the original payload length to upper layers</span><br />&#160;&#160;&#160;&#160;&#160;<br />&#160;&#160;&#160;&#160;<span style="color: #969896; ">// free message, it has been processed and is not needed</span><br />&#160;&#160;&#160;&#160;pCallbackData<span style="color: #000000; ">-&gt;</span>pTable<span style="color: #000000; ">-&gt;</span><span style="color: #795da3; font-weight: bold; ">mFreeRxMessage</span><span style="color: #000000; ">(</span>pCallbackData<span style="color: #000000; ">-&gt;</span>pPortHandle<span style="color: #000000; ">,</span> pMsg<span style="color: #000000; ">,</span> pSideband<span style="color: #000000; ">);</span><br />&#160;&#160;&#160;&#160;<span style="color: #a71d5d; ">return</span> <span style="color: #df5000; ">0</span><span style="color: #000000; ">;</span><br /><span style="color: #000000; ">}</span><br />&#160;<br /><span style="color: #969896; ">// error callback for Automotive Ethernet messages</span><br /><span style="color: #a71d5d; font-weight: bold; ">int</span> <span style="color: #795da3; font-weight: bold; ">rxMessageErrorCallback</span><span style="color: #000000; ">(</span><span style="color: #795da3; font-weight: bold; ">const</span> vNetAutoEthernetMessage<span style="color: #000000; ">*</span> pMsg<span style="color: #000000; ">,</span> <span style="color: #795da3; font-weight: bold; ">const</span> vNetAutoEthernetSideband<span style="color: #000000; ">*</span> pSideband<span style="color: #000000; ">,</span> <span style="color: #795da3; font-weight: bold; ">const</span> vNetAutoEthernetMessageError<span style="color: #000000; ">*</span> errorType<span style="color: #000000; ">,</span> vNetEthUserCallbackDataError<span style="color: #000000; ">*</span> pCallbackData<span style="color: #000000; ">)</span><br /><span style="color: #000000; ">{</span><br />&#160;&#160;&#160;&#160;<span style="color: #a71d5d; ">return</span> <span style="color: #df5000; ">0</span><span style="color: #000000; ">;</span><br /><span style="color: #000000; ">}</span><br />&#160;<br /><span style="color: #969896; ">// free tx buffer callback for Automotive Ethernet messages</span><br /><span style="color: #a71d5d; font-weight: bold; ">int</span> <span style="color: #795da3; font-weight: bold; ">freeTxBufferCallback</span><span style="color: #000000; ">(</span><span style="color: #795da3; font-weight: bold; ">const</span> vNetAutoEthernetMessage<span style="color: #000000; ">*</span> pTxMsg<span style="color: #000000; ">,</span> vNetEthUserCallbackDataTx<span style="color: #000000; ">*</span> pCallbackData<span style="color: #000000; ">)</span><br /><span style="color: #000000; ">{</span><br />&#160;&#160;&#160;&#160;<span style="color: #969896; ">// DO NOT free - buffer being reused</span><br />&#160;&#160;&#160;&#160;<span style="color: #a71d5d; ">return</span> <span style="color: #df5000; ">0</span><span style="color: #000000; ">;</span><br /><span style="color: #000000; ">}</span></code></pre>
                                        </div>
                                    </div>
                                    <h5>Remarks</h5>
                                    <ul>
                                        <li class="list">Note that the Ethernet version of the callback has an additional argument: a sideband object</li>
                                        <li class="list">The sideband object is specific for Ethernet and contains additional data, e. g. sender payload</li>
                                        <li class="list">User callback provides context information to the callback and is discussed in <a href="vNet Basics and example usage with ESSE Virtual Networks.htm" class="MCXref xref">vNet Basics and example usage with  ETAS Virtual Networks</a>.</li>
                                    </ul>
                                    <h3>Future Extensions</h3>
                                    <ul>
                                        <li>Configurable transmission latencies</li>
                                        <li>Frame-level access to transmitted and received frames</li>
                                        <li>Access to frames before and after passing filters</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div><a data-close="true"></a>
                </div>
            </div>
        </div>
    </body>
</html>