<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="_Skins_HTML5_Side" lang="en" xml:lang="en" data-mc-search-type="Stem" data-mc-help-system-file-name="COSYM_Online_Help.xml" data-mc-path-to-help-system="../../../" data-mc-has-content-body="True" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Virtual Networks|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="msapplication-config" content="../../../Skins/Favicons/browserconfig.xml" />
        <link rel="shortcut icon" href="../../../Skins/Favicons/favicon_3.ico" />
        <link rel="icon" sizes="16x16" href="../../../Skins/Favicons/favicon_2.ico" />
        <link rel="icon" sizes="16x16" href="../../../Skins/Favicons/favicon_1.ico" />
        <link rel="icon" sizes="16x16" href="../../../Skins/Favicons/favicon.ico" />
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Fluid/Stylesheets/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" /><title>Runtime</title>
        <link href="../../TableStyles/table2.css" rel="stylesheet" data-mc-stylesheet-type="table" />
        <link href="../../Stylesheets/ETAS_flare_EN.css" rel="stylesheet" type="text/css" />
        <meta name="Product" content="COSYM" />
        <meta name="Version" content="V3.4.1" />
        <meta name="Revision" content="R01 EN - 05.2024" />
        <meta name="Copyright Year" content="2024" />
        <meta name="Doc Type" content="User Guide" />
        <script src="../../Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Scripts/foundation.6.2.3_custom.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Scripts/MadCapAll.js" type="text/javascript" defer="defer">
        </script>
    </head>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-left" role="navigation" id="offCanvas" data-off-canvas="" data-position="left" data-mc-ignore="true">
                    <ul class="off-canvas-accordion vertical menu off-canvas-list" data-accordion-menu="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div data-sticky-container="" class="title-bar-container">
                        <nav class="title-bar tab-bar sticky" role="banner" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="only screen and (max-width: 1279px)" data-mc-ignore="true"><a class="skip-to-content fluid-skip showOnFocus" href="#">Skip To Main Content</a>
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <div class="central-account-wrapper">
                                        <div class="central-dropdown"><a class="central-account-drop"><span class="central-account-image"></span><span class="central-account-text">Account</span></a>
                                            <div class="central-dropdown-content"><a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                                                <hr class="central-separator" /><a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                                            </div>
                                        </div>
                                    </div>
                                    <button class="menu-icon" aria-label="Show Navigation Panel" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../Help.htm" alt="Logo"></a>
                                </div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" role="navigation" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                        </li>
                                    </ul>
                                </div>
                                <div class="central-account-wrapper">
                                    <div class="central-dropdown"><a class="central-account-drop"><span class="central-account-image"></span><span class="central-account-text">Account</span></a>
                                        <div class="central-dropdown-content"><a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                                            <hr class="central-separator" /><a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                                        </div>
                                    </div>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie">
                                                <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search" />
                                                <div class="search-filter-wrapper"><span class="invisible-label" id="search-filters-label">Filter: </span>
                                                    <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                                    </div>
                                                    <div class="search-filter-content" id="sf-content">
                                                        <ul>
                                                            <li>
                                                                <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001"><span id="filterSelectorLabel-00001">All Files</span>
                                                                </button>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Search" role="button" tabindex="0"><span class="invisible-label">Submit Search</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <div class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <nav class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </nav>
                            <div class="body-container">
                                <div id="mc-main-content" role="main" data-mc-content-body="True">
                                    <h3>Runtime</h3>
                                    <ul>
                                        <li class="list">At the beginning of each simulation cycle each interface requires a call of <span class="code">mPreStepPort()</span><ul><li class="list2">This call must happen before the actual step() function of the model is called</li><li class="list2"><span class="code">mPreStepPort() </span>may block for some time</li><li class="list2">The transmission of frames to destination interfaces in the virtual network happens here</li><li class="list2">All of the communication partners are synchronized by calling <span class="code">mPreStepPort()</span></li><li class="list2">Since frames are received during <span class="code">mPreStepPort()</span>, callback function to receive frames might be called here</li><li class="list2">Since errors can happen during transmission the callback function to handle errors might be called in case of errors</li><li class="list2">After <span class="code">mPreStepPort()</span> has returned all interfaces might have received new frames. All frames are ready to be received by the application process</li><li class="list2">Between the end of the call to <span class="code">mPostStep()</span> and the beginning of the call to <span class="code">mPreStepPort()</span> virtual time for the connected network passes - so it jumps to a new value</li></ul></li>
                                        <li class="list">The next steps in the model would be to process the received frames<ul><li class="list2">Note that after calling <span class="code">mPreStepPort()</span> all frames for the current simulation cycle have been received, so no other frames can be expected during this simulation cycle!<ul><li class="list2">So waiting for new frames at the application, or intermediate layers interfacing to vNet, layer doesn't really make sense here, it would block until the next network step which cannot occur while the model is executing</li><li class="list2">Avoid blocking waiting of the model for frames - they will never return and the model will get stuck in a deadlock!</li></ul></li><li class="list2" style="font-weight: normal;">Frames are ordered in the internal buffer as they have been received. They are arbitrated in time across the previous step and with a comprehensive model of the communication times and prioritized arbitration characteristics for the particular network protocol.</li><li class="list2" style="font-weight: normal;">The step of the model in which reception occurs is the same for all of messages received (since no further messages can be received until the model step is complete). The frames are already sorted in the order they would have been received (see above) so there is no need to again sort frames received in a step using time stamps. The order in which the receive message callbacks occur should be the order in which the frames are processed.</li></ul></li>
                                        <li class="list">After processing all inputs models might send new frames to the network<ul><li class="list2">Avoid blocking calls in the interface to vNet (the vNet and SNF layers do not block on sending of frames)</li><li class="list2">Note that sending frames e. g. via sockets might also block if internal queues are full, this behavior must be avoided e. g. by providing special flags to socket functions</li><li class="list2">Note that  ETAS Virtual Network simulations know exactly the transmission capacity in each simulation step</li><li class="list2">Note that message loss (for SnfAutoEther and SnfFlexRay networks) may happen if the model attempts to send too many frames in one simulation cycle (if the transmission limit is exceeded). This transmission limit issue for these networks has been adressed for SnfCanMm networks and will be adressed for SnfAutoEther and SnfFlexRay networks in the next development cycle (Q1 2020).</li></ul></li>
                                        <li class="list">After sending all frames in the current step the model has to call <span class="code">mPostStepPort()</span><ul><li class="list2">No network communication shall happen between <span class="code">mPostStepPort()</span> in simulation cycle N and <span class="code">mPreStepPort()</span> in simulation cycle N+1!</li></ul></li>
                                    </ul>
                                    <p>The sequence chart below demonstrates how a typical simulation cycle with vNet network communication should be implemented:</p>
                                    <p class="paragraph">
                                        <img src="../../Images/vNET/vnet6.png" class="wide" />
                                    </p>
                                    <h3>Message Objects</h3>
                                    <ul>
                                        <li class="list">Frames are represented by Message Objects. In the vNet API they are represented by different structs and classes for each network type</li>
                                        <li class="list">Depending on the network type they contain different address information and maximum payload sizes</li>
                                        <li class="list">Message objects are handled by functions to send and receive frames</li>
                                        <li class="list">Message objects are represented by C structs or derived C++ classes (when developing in C++ both representations can be used, but the C++ class seems to be more comfortable)<ul><li class="list2">Message objects for transmission can be created using the static C++ factory function create(), which allocates the object using the C++ new operator</li><li class="list2">After sending a message its object has to be freed using the C++ delete[] operator</li><li class="list2">Received Message objects, once processed and all references completed, must be freed using the mFreeRxMessage vNet function</li></ul></li>
                                        <li class="list">It is also possible to use own functions to allocate/free message objects (for transmission) without calling the C++ factory function create()</li>
                                        <li class="list">The following table gives an overview of all message object types:</li>
                                    </ul>
                                    <table style="mc-table-style: url('../../TableStyles/table2.css');" class="TableStyle-table2" cellspacing="2">
                                        <tbody>
                                            <tr class="TableStyle-table2-Body-Body1">
                                                <th style="text-align: center;" class="TableStyle-table2-BodyE-Column1-Body1">Network Type</th>
                                                <th style="text-align: center;" class="TableStyle-table2-BodyE-Column1-Body1">C Struct</th>
                                                <th style="text-align: center;" class="TableStyle-table2-BodyD-Column1-Body1">Derived C++ class</th>
                                            </tr>
                                            <tr class="TableStyle-table2-Body-Body1">
                                                <td class="TableStyle-table2-BodyE-Column1-Body1">Automotive Ethernet</td>
                                                <td class="TableStyle-table2-BodyE-Column1-Body1"><span class="code">vNetAutoEthernetMessage</span>
                                                </td>
                                                <td class="TableStyle-table2-BodyD-Column1-Body1"><span class="code">vNetAutoEthernetMessageEx</span>
                                                </td>
                                            </tr>
                                            <tr class="TableStyle-table2-Body-Body1">
                                                <td class="TableStyle-table2-BodyE-Column1-Body1">CAN</td>
                                                <td class="TableStyle-table2-BodyE-Column1-Body1"><span class="code">vNetCanMessage</span>
                                                </td>
                                                <td class="TableStyle-table2-BodyD-Column1-Body1"><span class="code">vNetCanMessageEx</span>
                                                </td>
                                            </tr>
                                            <tr class="TableStyle-table2-Body-Body1">
                                                <td class="TableStyle-table2-BodyB-Column1-Body1">FlexRay</td>
                                                <td class="TableStyle-table2-BodyB-Column1-Body1">
                                                    <p class="table_default"><span class="code">vNetFlexRayRxMessage</span>
                                                    </p>
                                                    <p class="table_default"><span class="code">vNetFlexRayTxMessage</span>
                                                    </p>
                                                </td>
                                                <td class="TableStyle-table2-BodyA-Column1-Body1">
                                                    <p class="table_default"><span class="code">vNetFlexRayRxMessageEx</span>
                                                    </p>
                                                    <p class="table_default"><span class="code">vNetFlexRayTxMessageEx</span>
                                                    </p>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                    <h3>Sending and Receiving of Frames</h3>
                                    <ul>
                                        <li class="list">Sending and receiving of frames is similar for all network types</li>
                                        <li class="list">Differences result mostly from different message objects, payload lengths and address data</li>
                                        <li class="list"><span class="code">mSendMessage()</span> is used to send 1 frame to the network</li>
                                        <li class="list">It expects<ul><li class="list2">a port handle (the port must be open and started)</li><li class="list2">a pointer to a message object holding the address data and the payload, its type depends on the network type</li><li class="list2">Note that some networks such as e. g. Ethernet require additional arguments here</li></ul></li>
                                        <li class="list">The callback function registered via <span class="code">mRegisterRxMessageCallback()</span> is called for every message received by the interface<ul><li class="list2">On frame reception the callback is passed the message object and user callback data</li><li class="list2">User callback data is a void pointer to an object that was registered together with callback by <span class="code">mRegisterRxMessageCallback()</span></li><li class="list2">User callback data is useful to provide user-defined context information to the callback - this is much better than storing this kind of data in static objects</li></ul></li>
                                    </ul>
                                    <p>For CAN networks, refer to  "Example code to register callbacks and receive frames" section on <a href="vNet CAN.htm" class="MCXref xref">VNET CAN</a>.</p>
                                    <p>For Automotive Ethernet, refer to "Example code" on <a href="vNet Ethernet.htm" class="MCXref xref">vNet Ethernet</a>.</p>
                                    <p>For FlexRay,  refer to "Example code" on <a href="vNet FlexRay.htm" class="MCXref xref">vNet FlexRay</a>.</p>
                                    <h3>Timing</h3>
                                    <p>A particular attention must be paid to the timing:</p>
                                    <ul>
                                        <li>There is no global simulation time variable</li>
                                        <li>For each simulation model the most frequently stepped vNet interface shall be used to compute the virtual simulation time<ul><li class="list2">by counting the simulation cycles (e. g. between <span class="code">mPreStepPort()</span> and <span class="code">mPostStepPort()</span>)</li><li class="list2">by multiplying this counter with the duration of each simulation cycle</li><li class="list2">If the most frequently stepped interface is used the simulation time will have the highest accuracy</li></ul></li>
                                        <li>The duration of a simulation cycle of each network is configured in the XML global configuration file</li>
                                        <li>The problem now is: How to provide the cycle duration to the model without reading and parsing the XML file?</li>
                                        <li>There is a simple solution in vNet:<ul><li class="list2">As discussed above each model needs to set-up a port configuration in order to open a port by calling<span class="code"> mOpenPort()</span></li><li class="list2">If mStepsPerSecond in the port configuration is set to -1 then <span class="code">mOpenPort() </span>will write the configured step duration to mStepsPerSecond</li><li class="list2">This value will then overwrite the initial value -1</li><li class="list2">mStepsPerSecond can then be used to increment the virtual time variable after each step</li></ul></li>
                                    </ul>
                                    <p>Typically, the initial virtual time is 0 at the beginning of the simulation, but it can also be set initially to any other value.</p>
                                    <p>All communication partners will count the same virtual time because they synchronize on calling <span class="code">mPreStepPort()</span> and<span class="code"> mPostStepPort()</span>, so all of them shall do exactly the same number of calls if they are connected to the same network. No model can call<span class="code"> mPreStepPort() </span>more often than any other model connected to the same network.</p>
                                    <p>If a model uses several networks for communication and those networks have different stepping rates, all of the interfaces need to be stepped with the right rates. So at the end all interfaces, no matter what stepping rates they have, must compute the same virtual time!</p>
                                    <p>Do not use any other time sources like system clocks! Do not use any real time clocks!</p>
                                    <p>Example: The following sequence chart shows how the virtual time is kept in all models and network interfaces based on steps. The example has been introduced <a href="#" class="Number_Page MCXref xref xrefNumber_Page" xrefformat="{para}">Runtime</a>.</p>
                                    <p>In order to understand the sequence chart it is important to mention that in each model and interface the virtual time variable T is local and gets increased at the end of each step (e. g. after calling <span class="code">postStep()</span>)</p>
                                    <p class="paragraph">
                                        <img src="../../Images/vNET/vnet13.png" class="wide" />
                                    </p>
                                    <p class="figure_title" data-mc-autonum="Fig. 236: "><span class="autonumber"><span class="bold">Fig. 236: </span></span><a name="Timing"></a>Timing diagram</p>
                                    <ul>
                                        <li>At the end of the simulation after 1 second virtual time, the model and both interfaces have measured the same virtual time of 1000ms.</li>
                                        <li>The models are synchronised only in certain points of time or time intervals</li>
                                        <li>The virtual time jumps individually for each model and interface according to its step rate</li>
                                        <li> Models and network interfaces might see different virtual times at the same real point of time because of the jumping and different stepping rates</li>
                                    </ul>
                                    <h3>Clean-up</h3>
                                    <p>As mentioned above calls to <span class="code">mStopPort()</span> and <span class="code">mClosePort() </span>are necessary to stop the simulation. In addition, the handle of the shared library must be closed.</p>
                                </div>
                            </div>
                        </div>
                    </div><a data-close="true"></a>
                </div>
            </div>
        </div>
    </body>
</html>