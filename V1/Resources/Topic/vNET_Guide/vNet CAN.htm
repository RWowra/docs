<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" class="_Skins_HTML5_Side" lang="en" xml:lang="en" data-mc-search-type="Stem" data-mc-help-system-file-name="COSYM_Online_Help.xml" data-mc-path-to-help-system="../../../" data-mc-has-content-body="True" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Virtual Networks">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="msapplication-config" content="../../../Skins/Favicons/browserconfig.xml" />
        <link rel="shortcut icon" href="../../../Skins/Favicons/favicon_3.ico" />
        <link rel="icon" sizes="16x16" href="../../../Skins/Favicons/favicon_2.ico" />
        <link rel="icon" sizes="16x16" href="../../../Skins/Favicons/favicon_1.ico" />
        <link rel="icon" sizes="16x16" href="../../../Skins/Favicons/favicon.ico" />
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../../Skins/Fluid/Stylesheets/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" /><title>VNET CAN</title>
        <link href="../../Stylesheets/ETAS_flare_EN.css" rel="stylesheet" type="text/css" />
        <meta name="Product" content="COSYM" />
        <meta name="Version" content="V3.4.1" />
        <meta name="Revision" content="R01 EN - 05.2024" />
        <meta name="Copyright Year" content="2024" />
        <meta name="Doc Type" content="User Guide" />
        <script src="../../Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Scripts/foundation.6.2.3_custom.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Scripts/MadCapAll.js" type="text/javascript" defer="defer">
        </script>
    </head>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-left" role="navigation" id="offCanvas" data-off-canvas="" data-position="left" data-mc-ignore="true">
                    <ul class="off-canvas-accordion vertical menu off-canvas-list" data-accordion-menu="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div data-sticky-container="" class="title-bar-container">
                        <nav class="title-bar tab-bar sticky" role="banner" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="only screen and (max-width: 1279px)" data-mc-ignore="true"><a class="skip-to-content fluid-skip showOnFocus" href="#">Skip To Main Content</a>
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <div class="central-account-wrapper">
                                        <div class="central-dropdown"><a class="central-account-drop"><span class="central-account-image"></span><span class="central-account-text">Account</span></a>
                                            <div class="central-dropdown-content"><a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                                                <hr class="central-separator" /><a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                                            </div>
                                        </div>
                                    </div>
                                    <button class="menu-icon" aria-label="Show Navigation Panel" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../Help.htm" alt="Logo"></a>
                                </div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" role="navigation" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                        </li>
                                    </ul>
                                </div>
                                <div class="central-account-wrapper">
                                    <div class="central-dropdown"><a class="central-account-drop"><span class="central-account-image"></span><span class="central-account-text">Account</span></a>
                                        <div class="central-dropdown-content"><a class="MCCentralLink central-dropdown-content-settings">Settings</a>
                                            <hr class="central-separator" /><a class="MCCentralLink central-dropdown-content-logout">Logout</a>
                                        </div>
                                    </div>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie">
                                                <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search" />
                                                <div class="search-filter-wrapper"><span class="invisible-label" id="search-filters-label">Filter: </span>
                                                    <div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="All Files" role="button" tabindex="0">
                                                    </div>
                                                    <div class="search-filter-content" id="sf-content">
                                                        <ul>
                                                            <li>
                                                                <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001"><span id="filterSelectorLabel-00001">All Files</span>
                                                                </button>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Search" role="button" tabindex="0"><span class="invisible-label">Submit Search</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <div class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <nav class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </nav>
                            <div class="body-container">
                                <div id="mc-main-content" role="main" data-mc-content-body="True">
                                    <h2>VNET CAN</h2>
                                    <p>In general to apply all vNet interfaces, the facts are explained in "vNet Basics" <a href="vNet Basics and example usage with ESSE Virtual Networks.htm" class="PageNum MCXref xref xrefPageNum">vNet Basics and example usage with  ETAS Virtual Networks</a>. This page aims at outlining the differences between the individual network types and the ESSE implementations of virtual networks. The focus of this page is CAN 2.0 and CAN FD.</p>
                                    <p class="paragraph">The header file used by VNET&#160;CAN is <span class="code">vNetCanInterface.h</span>.</p>
                                    <h3>CAN Facts</h3>
                                    <ul>
                                        <li class="list">In contrast to Ethernet networks CAN has no concept of addresses and address filters, so <b>all frames are broadcasted</b></li>
                                        <li class="list">CAN frames are identified by their ID</li>
                                        <li class="list">Each frame may be sent only by one interface, so for each frame ID there is always at most one interface that is configured to send this ID</li>
                                        <li class="list">Access to the wire is arbitrated using frame IDs<ul><li class="list2">Frames with a lower ID have higher priority and win the arbitration, all sending stations need to do carrier sense and collision detection</li><li class="list2">Frames with a high ID (low priority) might be delayed when high-priority frames are being sent</li></ul></li>
                                        <li class="list">Different CAN standards exist<ul><li class="list2">classic CAN<ul><li class="list2">CAN 2.0A with standard frames with 11 bit frame IDs</li><li class="list2">CAN 2.0B with extended frames with 29 bit frame IDs</li></ul></li><li class="list2">CAN FD<ul><li class="list2">with flexible data rates (frame length may be extended to transport more bytes/frame and thus decrease the relative overhead)</li><li class="list2">the following payload lengths are possible for CAN FD: 0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64 bytes</li><li class="list2">CAN Fast Data - in this mode after the arbitration is decided the sender and CAN FD receivers switch to a higher baud rate and check for CRC errors, all non CAN FD receivers stop listening</li></ul></li></ul></li>
                                        <li class="list">Many different baud rates can be configured</li>
                                    </ul>
                                    <h3>ESSE Virtual CAN Facts</h3>
                                    <p>The ESSE implementation of virtual CAN supports simulations of the logical bus behavior on ISO/OSI layer 2. It doesn't simulate the transmission of voltage levels but the transmission of frames.</p>
                                    <p>The current implementation supports</p>
                                    <ul>
                                        <li class="list">Bus arbitration based on frame IDs</li>
                                        <li class="list">Support for CAN and CAN-FD</li>
                                        <li class="list">Extended (29 bits) and standard (11 bits) CAN frames, also in a mixed mode</li>
                                        <li class="list">Configurable baud rates</li>
                                        <li class="list">Different frame lengths</li>
                                        <li class="list">Bit stuffing</li>
                                        <li class="list">Self-reception of frames (internal loop-back)</li>
                                        <li class="list">Support of various types of reception filters which can be configured independently for each interface</li>
                                    </ul>
                                    <h3>CAN Model</h3>
                                    <ul>
                                        <li class="list">The basic assumption of the ESSE virtual CAN network is a state-less communication in a single-wire network</li>
                                        <li class="list">Single-wire means that there are no CAN switches or bridges in the simulated network</li>
                                        <li class="list">State-less means that the content of the CAN frames does not contain stateful protocols but signal-oriented data</li>
                                        <li class="list">This assumption is wrong for stateful protocols based on CAN, like e. g. J1939. See the section Limitations below for further explanations,</li>
                                        <li class="list">CAN arbitration is done according to standard even for mixed, short, and long frame IDs</li>
                                    </ul>
                                    <h3>Initialization</h3>
                                    <p>The initialization of the interface is pretty much the same as for <a href="vNet Ethernet.htm" class="Heading_only MCXref xref xrefHeading_only">vNet Ethernet</a>. The different symbol names to import are listed in the table <a href="vNet Basics and example usage with ESSE Virtual Networks.htm#Getting" class="MCXref xref">Getting Symbols</a> section.</p>
                                    <h5>Initialization CAN interface</h5>
                                    <div class="codeSnippet"><a class="codeSnippetCopyButton" role="button" href="javascript:void(0);">Copy</a>
                                        <div style="mc-code-lang: CPP;" class="codeSnippetBody" data-mc-continue="False" data-mc-line-number-start="1" data-mc-use-line-numbers="False"><pre><code>constexpr <span style="color: #795da3; font-weight: bold; ">static</span> <span style="color: #795da3; font-weight: bold; ">const</span> <span style="color: #a71d5d; ">char</span><span style="color: #000000; ">*</span> dllImportFunc <span style="color: #000000; ">=</span> <span style="color: #df5000; ">"vNetCan_getInterface"</span><span style="color: #000000; ">;</span><br /><span style="color: #969896; ">#ifdef WIN32</span><br />&#160;&#160;&#160;&#160;constexpr <span style="color: #795da3; font-weight: bold; ">static</span> <span style="color: #795da3; font-weight: bold; ">const</span> <span style="color: #a71d5d; ">char</span><span style="color: #000000; ">*</span> dllName <span style="color: #000000; ">=</span> <span style="color: #df5000; ">"vNetInterfaceSnf.dll"</span><span style="color: #000000; ">;</span><br /><span style="color: #969896; ">#else //Linux</span><br />&#160;&#160;&#160;&#160;constexpr <span style="color: #795da3; font-weight: bold; ">static</span> <span style="color: #795da3; font-weight: bold; ">const</span> <span style="color: #a71d5d; ">char</span><span style="color: #000000; ">*</span> dllName <span style="color: #000000; ">=</span> <span style="color: #df5000; ">"libvNetInterfaceSnf.so"</span><span style="color: #000000; ">;</span><br /><span style="color: #969896; ">#endif</span><br />&#160;&#160;&#160;&#160;constexpr <span style="color: #795da3; font-weight: bold; ">static</span> <span style="color: #a71d5d; font-weight: bold; ">int</span> errorBufferSize <span style="color: #000000; ">=</span> <span style="color: #df5000; ">1024</span><span style="color: #000000; ">;</span><br />&#160;&#160;&#160;&#160;constexpr <span style="color: #795da3; font-weight: bold; ">static</span> <span style="color: #a71d5d; font-weight: bold; ">int</span> ecuIndex <span style="color: #000000; ">=</span> <span style="color: #df5000; ">0</span><span style="color: #000000; ">;</span><br />&#160;&#160;&#160;&#160;<span style="color: #a71d5d; ">char</span> errorBuffer<span style="color: #000000; ">[</span>errorBufferSize<span style="color: #000000; ">];</span><br />&#160;<br />&#160;&#160;&#160;&#160;<span style="color: #969896; ">//Prepare and setup vNet interface</span><br />&#160;&#160;&#160;&#160;<span style="color: #969896; ">//dynamic loading of a shared library</span><br />&#160;&#160;&#160;&#160;<span style="color: #a71d5d; font-weight: bold; ">auto</span> libraryHandle <span style="color: #000000; ">=</span> <span style="color: #795da3; font-weight: bold; ">openSharedLibrary</span><span style="color: #000000; ">(</span>dllName<span style="color: #000000; ">,</span> errorBufferSize<span style="color: #000000; ">,</span> errorBuffer<span style="color: #000000; ">);</span><br />&#160;<br />&#160;&#160;&#160;&#160;<span style="color: #969896; ">//dynamic linking of the factory function</span><br />&#160;&#160;&#160;&#160;vNetAutoEthernet_getInterface_t pGetInterface <span style="color: #000000; ">=</span> <span style="color: #000000; ">(</span>vNetCan_getInterface_t<span style="color: #000000; ">)</span> <span style="color: #795da3; font-weight: bold; ">getSharedLibrarySymbol</span><span style="color: #000000; ">(</span>libraryHandle<span style="color: #000000; ">,</span> dllImportFunc<span style="color: #000000; ">);</span><br />&#160;<br />&#160;&#160;&#160;&#160;<span style="color: #969896; ">//get the vNet interface object</span><br />&#160;&#160;&#160;&#160;<span style="color: #a71d5d; font-weight: bold; ">auto</span> vNetInterface <span style="color: #000000; ">=</span> <span style="color: #795da3; font-weight: bold; ">pGetInterface</span><span style="color: #000000; ">(</span>vNetCanInterfaceVersion<span style="color: #000000; ">);</span></code></pre>
                                        </div>
                                    </div>
                                    <h3>Configuration</h3>
                                    <p>The configuration of a CAN bus port is simpler than the configuration of an Ethernet or a FlexRay port due to lack of addresses and interface-specific filters.</p>
                                    <h5>CAN configuration</h5>
                                    <div class="codeSnippet"><a class="codeSnippetCopyButton" role="button" href="javascript:void(0);">Copy</a>
                                        <div style="mc-code-lang: CPP;" class="codeSnippetBody" data-mc-continue="False" data-mc-line-number-start="1" data-mc-use-line-numbers="False"><pre><code><span style="color: #a71d5d; font-weight: bold; ">typedef</span> <span style="color: #a71d5d; ">struct</span> vNetCanGlobalConfig<br /><span style="color: #000000; ">{</span><br />&#160;&#160;&#160;&#160;uint32_t mVersion<span style="color: #000000; ">;</span><br />&#160;&#160;&#160;&#160;int32_t mBaudRate<span style="color: #000000; ">;</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #969896; ">// bus clocks per second</span><br />&#160;&#160;&#160;&#160;int32_t mFastDataMultiplyer<span style="color: #000000; ">;</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #969896; ">// fast bus clocks per bus clock</span><br />&#160;&#160;&#160;&#160;int32_t mStepRate<span style="color: #000000; ">;</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #969896; ">// bus clocks per step</span><br />&#160;&#160;&#160;&#160;uint32_t mSpareLocal<span style="color: #000000; ">[</span><span style="color: #df5000; ">4</span><span style="color: #000000; ">];</span><br /><span style="color: #000000; ">}</span> vNetCanGlobalConfig<span style="color: #000000; ">;</span></code></pre>
                                        </div>
                                    </div>
                                    <p>&#160;</p>
                                    <p>The main configuration items are:</p>
                                    <ul>
                                        <li class="list"><i>baud rate</i> of the entire network in bus clocks per second, e. g. 500 000</li>
                                        <li class="list"><i>fast data multiplier</i> - ratio between fast bus ticks and slow bus ticks for the fast data mode in case of CAN FD, e. g. 8</li>
                                        <li class="list"><i>step rate</i> in bus clocks per step, e. g. 1000 so this means a stepping rate of 500 000 / 1000 =500 steps per second (2ms step duration)</li>
                                    </ul>
                                    <p>The following example demonstrates the configuration of a CAN port:</p>
                                    <h5>CAN port configuration</h5>
                                    <div class="codeSnippet"><a class="codeSnippetCopyButton" role="button" href="javascript:void(0);">Copy</a>
                                        <div style="mc-code-lang: CPP;" class="codeSnippetBody" data-mc-continue="False" data-mc-line-number-start="1" data-mc-use-line-numbers="False"><pre><code><span style="color: #969896; ">// configuration of a CAN/CAN-FD port</span><br />vNetCanGlobalConfig canCfg<span style="color: #000000; ">;</span><br />canCfg<span style="color: #000000; ">.</span>mBaudRate <span style="color: #000000; ">=</span> <span style="color: #df5000; ">500000</span><span style="color: #000000; ">;</span><br />canCfg<span style="color: #000000; ">.</span>mFastDataMultiplyer <span style="color: #000000; ">=</span> <span style="color: #df5000; ">8</span><span style="color: #000000; ">;</span><br />canCfg<span style="color: #000000; ">.</span>mStepRate <span style="color: #000000; ">=</span> <span style="color: #df5000; ">1000</span><span style="color: #000000; ">;</span></code></pre>
                                        </div>
                                    </div>
                                    <p class="paragraph">&#160;</p>
                                    <p>The port configuration of the CAN/CAN-FD network instance has to be aligned with the related network configuration in the XML file. The baud rate in this example is given by 500k. This matches the configuration ticks=1G and busTicks=2K. The fast data multiplier is equal to the quotient of busTicks=2K and fastBusTicks=250. The parameter <span class="code">mStepRate</span> specifies the step rate of the model instance. The given value has to be divided by the baud rate. In the given example this results in a model step width of 2 milliseconds. This matches the network parameters of ticks=1G and stepTicks=2M as discussed.</p>
                                    <p>With such a configuration we can call <span class="code">mOpenPort()</span> of the VNET CAN interface to open and start the port as described in the <a href="vNet Basics and example usage with ESSE Virtual Networks.htm" class="MCXref xref">vNet Basics and example usage with  ETAS Virtual Networks</a>.</p>
                                    <h3>Runtime</h3>
                                    <p>The function <span class="code">mSendMessage()</span> and the callback function registered via <span class="code">mRegisterRxMessageCallback()</span> handle <i>CAN Message Objects</i> of type vNetCanMessage:</p>
                                    <h5>CAN Message Data</h5>
                                    <div class="codeSnippet"><a class="codeSnippetCopyButton" role="button" href="javascript:void(0);">Copy</a>
                                        <div style="mc-code-lang: CPP;" class="codeSnippetBody" data-mc-continue="False" data-mc-line-number-start="1" data-mc-use-line-numbers="False"><pre><code><span style="color: #a71d5d; font-weight: bold; ">typedef</span> <span style="color: #a71d5d; ">struct</span> vNetCanMessage<br /><span style="color: #000000; ">{</span><br />&#160;&#160;&#160;&#160;uint64_t mRequestTicks<span style="color: #000000; ">;</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #969896; ">// for Rx message the (Slow) Bus ticks when message requested</span><br />&#160;&#160;&#160;&#160;uint64_t mStartTicks<span style="color: #000000; ">;</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #969896; ">// for Rx message the (Slow) Bus ticks when message started</span><br />&#160;&#160;&#160;&#160;uint32_t mMsgLengthTicks<span style="color: #000000; ">;</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #969896; ">// for Rx message the (Slow) Bus ticks it took to transmit message</span><br />&#160;&#160;&#160;&#160;uint32_t mCanFrameId<span style="color: #000000; ">;</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #969896; ">// 11 or 29 bit Can Frame Id</span><br />&#160;&#160;&#160;&#160;uint16_t mCrc<span style="color: #000000; ">;</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #969896; ">// for Rx message the calculated CRC</span><br />&#160;&#160;&#160;&#160;vNetCanMessageFlags mFlags<span style="color: #000000; ">;</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #969896; ">// vNetCanMessageFlags flags,</span><br />&#160;<br />&#160;&#160;&#160;&#160;uint8_t&#160;&#160;mPayloadLength<span style="color: #000000; ">;</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #969896; ">// number of bytes in payload, for RTR is number of bytes requested.</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #969896; ">// MUST be one of 0 to 8, 12, 16, 20, 24, 32, 48 or 64</span><br />&#160;&#160;&#160;&#160;uint8_t&#160;&#160;mPayload<span style="color: #000000; ">[</span><span style="color: #df5000; ">4</span><span style="color: #000000; ">];</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #969896; ">// expanded to required payload size for frames</span><br /><span style="color: #000000; ">}</span> vNetCanMessage<span style="color: #000000; ">;</span></code></pre>
                                        </div>
                                    </div>
                                    <p>CAN message objects contain the following information in addition to the payload:</p>
                                    <ul>
                                        <li class="list">the number of slow bus ticks passed at the point of time when the message was sent to the interface (send request), since this number is an absolute counter value, it might be very large, so a 64 bit number is used here</li>
                                        <li class="list">the number of slow bus ticks passed at the point of time when the message was arbitrated and sent to the wire, since this number is an absolute counter value, it might be very large, so a 64 bit number is used here</li>
                                        <li class="list">the number of slow bus ticks it took to transmit the message</li>
                                        <li class="list">the frame ID as 32bit uint used to transport both, small (11 bit) and large (29 bit) frame IDs</li>
                                        <li class="list">CRC checksum for received messages only</li>
                                        <li class="list">Message flags</li>
                                        <li class="list">payload length in bytes</li>
                                    </ul>
                                    <p>Note that the length of payload data in mPayLoad is not necessarily 4 bytes, but may be extended to hold larger payloads.</p>
                                    <p>The message flags indicate details about the message to be sent/received:</p>
                                    <h5>CAN Message Flags</h5>
                                    <div class="codeSnippet"><a class="codeSnippetCopyButton" role="button" href="javascript:void(0);">Copy</a>
                                        <div style="mc-code-lang: CPP;" class="codeSnippetBody" data-mc-continue="False" data-mc-line-number-start="1" data-mc-use-line-numbers="False"><pre><code><span style="color: #a71d5d; font-weight: bold; ">typedef</span> <span style="color: #a71d5d; ">enum</span> evNetCanFlags<br /><span style="color: #000000; ">{</span><br />&#160;&#160;&#160;&#160;eIsExt <span style="color: #000000; ">=</span> <span style="color: #df5000; ">1</span> <span style="color: #000000; ">&lt;&lt;</span> <span style="color: #df5000; ">0</span><span style="color: #000000; ">,</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #969896; ">// when equal 1 indicates an extended 29 bit ID instead of a standard 11 bit ID</span><br />&#160;&#160;&#160;&#160;eIsRtr <span style="color: #000000; ">=</span> <span style="color: #df5000; ">1</span> <span style="color: #000000; ">&lt;&lt;</span> <span style="color: #df5000; ">1</span><span style="color: #000000; ">,</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #969896; ">// when equal 1 indicates Request To Send</span><br />&#160;&#160;&#160;&#160;eIsFd&#160;&#160;<span style="color: #000000; ">=</span> <span style="color: #df5000; ">1</span> <span style="color: #000000; ">&lt;&lt;</span> <span style="color: #df5000; ">2</span><span style="color: #000000; ">,</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #969896; ">// when equal 1 indicates FD mode</span><br />&#160;&#160;&#160;&#160;eIsFast<span style="color: #000000; ">=</span> <span style="color: #df5000; ">1</span> <span style="color: #000000; ">&lt;&lt;</span> <span style="color: #df5000; ">3</span><span style="color: #000000; ">,</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #969896; ">// when equal 1 indicates FD Fast Data (eIsFd must also be equal 1)</span><br />&#160;&#160;&#160;&#160;eIsSelfReception <span style="color: #000000; ">=</span> <span style="color: #df5000; ">1</span> <span style="color: #000000; ">&lt;&lt;</span> <span style="color: #df5000; ">7</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="color: #969896; ">// when equal 1 indicates that the received message was sent from this node</span><br /><span style="color: #000000; ">}</span> evNetCanFlags<span style="color: #000000; ">;</span></code></pre>
                                        </div>
                                    </div>
                                    <p>&#160;</p>
                                    <ul>
                                        <li><span class="code">eIsExt</span> indicates messages with extended header format (29 bit ID)</li>
                                        <li><span class="code">eIsRtr</span> indicates a request to send (RTR) message</li>
                                        <li><span class="code">eIsFd</span> indicates the FD mode with flexible data rates</li>
                                        <li><span class="code">eIsFast</span> indicates the Fast Data mode in which the payload part of the frame was sent with higher baud rate</li>
                                        <li><span class="code">eIsSelfReception</span> indicates that the message was sent on the same interface (internal loopback), the point of time of reception is when the message was arbitrated (as seen by the virtual model of the particular network protocol)</li>
                                    </ul>
                                    <h3>Sending and Receiving of Messages</h3>
                                    <p>Sending of CAN messages is straightforward task for which <span class="code">mSendMessage()</span> must be used. Keep in mind that sending is only possible between <span class="code">mPreStep()</span> and <span class="code">mPostStep()</span>.</p>
                                    <p>The reception of frames and errors, however, requires some preparations. In particular, callback functions must be registered. They will be called in the context of <span class="code">mPreStep()</span>.</p>
                                    <h5>Receiving of CAN Messages</h5>
                                    <div class="codeSnippet"><a class="codeSnippetCopyButton" role="button" href="javascript:void(0);">Copy</a>
                                        <div style="mc-code-lang: CPP;" class="codeSnippetBody" data-mc-continue="False" data-mc-line-number-start="1" data-mc-use-line-numbers="False"><pre><code><span style="color: #969896; ">// receiver callback for CAN/CAN-FD messages</span><br /><span style="color: #a71d5d; font-weight: bold; ">int</span> <span style="color: #795da3; font-weight: bold; ">rxMessageCallback</span><span style="color: #000000; ">(</span><span style="color: #795da3; font-weight: bold; ">const</span> vNetCanMessage<span style="color: #000000; ">*</span> pMsg<span style="color: #000000; ">,</span> vNetCanUserCallbackDataRx<span style="color: #000000; ">*</span> pCallbackData<span style="color: #000000; ">)</span><br /><span style="color: #000000; ">{</span><br />&#160;&#160;&#160;&#160;<span style="color: #969896; ">// Add code here to process received messages, e. g. to store them in a buffer</span><br />&#160;<br />&#160;&#160;&#160;&#160;<span style="color: #969896; ">// free message, it has been processed and is not needed</span><br />&#160;&#160;&#160;&#160;pCallbackData<span style="color: #000000; ">-&gt;</span>pTable<span style="color: #000000; ">-&gt;</span><span style="color: #795da3; font-weight: bold; ">mFreeRxMessage</span><span style="color: #000000; ">(</span>pCallbackData<span style="color: #000000; ">-&gt;</span>pPortHandle<span style="color: #000000; ">,</span> pMsg<span style="color: #000000; ">);</span><br />&#160;&#160;&#160;&#160;<span style="color: #a71d5d; ">return</span> <span style="color: #df5000; ">0</span><span style="color: #000000; ">;</span><br /><span style="color: #000000; ">}</span><br />&#160;<br /><span style="color: #969896; ">// error callback for CAN/CAN-FD messages</span><br /><span style="color: #a71d5d; font-weight: bold; ">int</span> <span style="color: #795da3; font-weight: bold; ">rxMessageErrorCallback</span><span style="color: #000000; ">(</span><span style="color: #795da3; font-weight: bold; ">const</span> vNetCanMessage<span style="color: #000000; ">*</span> pMsg<span style="color: #000000; ">,</span> <span style="color: #795da3; font-weight: bold; ">const</span> vNetCanMessageError<span style="color: #000000; ">*</span> errorType<span style="color: #000000; ">,</span> vNetCanUserCallbackDataError<span style="color: #000000; ">*</span> pCallbackData<span style="color: #000000; ">)</span><br /><span style="color: #000000; ">{</span><br />&#160;&#160;&#160;&#160;<span style="color: #a71d5d; ">return</span> <span style="color: #df5000; ">0</span><span style="color: #000000; ">;</span><br /><span style="color: #000000; ">}</span><br />&#160;<br /><span style="color: #969896; ">// free tx buffer callback for CAN/CAN-FD messages</span><br /><span style="color: #a71d5d; font-weight: bold; ">int</span> <span style="color: #795da3; font-weight: bold; ">freeTxBufferCallback</span><span style="color: #000000; ">(</span><span style="color: #795da3; font-weight: bold; ">const</span> vNetCanMessage<span style="color: #000000; ">*</span> pTxMsg<span style="color: #000000; ">,</span> vNetCanUserCallbackDataTx<span style="color: #000000; ">*</span> pCallbackData<span style="color: #000000; ">)</span><br /><span style="color: #000000; ">{</span><br />&#160;&#160;&#160;&#160;<span style="color: #969896; ">// DO NOT free - buffer being reused</span><br />&#160;&#160;&#160;&#160;<span style="color: #a71d5d; ">return</span> <span style="color: #df5000; ">0</span><span style="color: #000000; ">;</span><br /><span style="color: #000000; ">}</span></code></pre>
                                        </div>
                                    </div>
                                    <p>Note that there is no sideband structure passed to the callbacks. This is different to Ethernet and FlexRay.</p>
                                    <h3>Limitations</h3>
                                    <p>As explained above the current CAN implementation is not suitable for stateful communication like e.g . J1939 because frames might overwrite other frames with different content but with the same ID.</p>
                                    <ul>
                                        <li class="list">In the case that two frames with the same ID are<ul><li class="list2">sent in the same simulation cycle, or, one is sent while one is still pending for transmission from a previous cycle, and,</li><li class="list2">sent from the same CAN interface</li></ul></li>
                                        <li class="list">the CAN frame sent later may overwrite the CAN frame sent earlier in the send buffer of the interface</li>
                                    </ul>
                                    <p class="paragraph">
                                        <img src="../../Images/vNET/vnet12.png" class="left" />
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div><a data-close="true"></a>
                </div>
            </div>
        </div>
    </body>
</html>