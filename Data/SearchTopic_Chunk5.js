define({"353":{y:0,u:"../Resources/Topic/User_Guide/18_Res/ETAS Experiment Environment.htm",l:-1,t:"ETAS Experiment Environment",i:0.000745645322871073,a:"Signal Source Support ETAS Experiment Environment V3.9.x 64-bit supports only COSYM where x is the version number.  If your system has  ETAS EE V3.7.x/V3.8.x/V3.9.x versions, then you need to switch between these versions for the default workspace association. This can be done using below tools: ..."},"354":{y:0,u:"../Resources/Topic/User_Guide/18_Res/Signal Generator.htm",l:-1,t:"Instruments and Data Logger",i:0.000745645322871073,a:"Instruments and Data Logger  EE Instruments and Data logger do not support dynamically created \"Signals\" using the \"Signal Generator\" option for SiL signal source."},"355":{y:0,u:"../Resources/Topic/User_Guide/18_Res/Windows Keyboard.htm",l:-1,t:"Operating System and Keyboard",i:0.000745645322871073,a:" Currently, COSYM supports English language only.  You might get an error in INCA as  \"Transport Layer Failure, Transport layer configuration failed. No transport layer error set\".   It is due to the  characters on the keyboard as your keyboard is set to a language other than English. Therefore, it ..."},"356":{y:0,u:"../Resources/Topic/User_Guide/18_Res/Initial Values.htm",l:-1,t:"Initial Value",i:0.00113255895622371,a:"Initial Value When you export a model instance  in *.csmi format from COSYM, the provided initial value of the ports will not be retained. Hence, when you import an exported model instance later will lead to loss of initial value provided by you."},"357":{y:0,u:"../Resources/Topic/User_Guide/18_Res/Binary data type is not supported in the A2L document.htm",l:-1,t:"Generating an A2L File",i:0.00189268760404678,a:"Generating an A2L File While generating an A2L file, if any variable contains binary data type, then that variable is ignored in the A2L file."},"358":{y:0,u:"../Resources/Topic/User_Guide/18_Res/Propose Connections.htm",l:-1,t:"Propose Connections",i:0.00118972815884958,a:"Propose Connections  In \u0027Propose Connections\u0027 feature, the connections are suggested based on the  original port names only. It will not consider the label file when it is active. COSYM freezes when the model instances are having huge ports."},"359":{y:0,u:"../Resources/Topic/User_Guide/18_Res/SiL Target Streaming.htm",l:-1,t:"Data not Displayed for Short Simulation ",i:0.000745645322871073,a:" ETAS EE does not show the values  in  oscilloscope and in edit box for a short SiL simulation. In some cases where simulation time is very short, the values are not displayed in ETAS EE instruments. The short duration depends on the complexity of a project.  To see the complete data for the shorter ..."},"360":{y:0,u:"../Resources/Topic/User_Guide/18_Res/LABCAR-PA_limitation.htm",l:-1,t:"LABCAR-PA not Supporting Infinity Values",i:0.000745645322871073,a:"LABCAR-PA not Supporting Infinity Values If any model contains a parameter with the value \"Infinity\", the parameter value for such models cannot be edited for any of the parameters using LABCAR-PA, as this would lead to NaN (Not a Number) values. LABCAR-PA does not support \"Infinity\" values."},"361":{y:0,u:"../Resources/Topic/User_Guide/18_Res/VNET_limitation_VECU.htm",l:-1,t:"Limitation of the Number of VNET Models",i:0.000745645322871073,a:"Limitation of the Number of VNET Models A maximum of 47 VECUs can be connected using VNET."},"362":{y:0,u:"../Resources/Topic/User_Guide/19_Documents.htm",l:-1,t:"Technical Documents",i:0.000762944901327736,a:"COSYM provides you the important information on how to install and use the product which are described in the following documents listed below: Getting Started Guide Assists you in installing COSYM. It provides information on hardware and software\nrequirements, license information and many more ..."},"363":{y:0,u:"../Resources/Topic/User_Guide/20_References.htm",l:-1,t:"References",i:0.000762944901327736,a:"References Refer to the websites below for more details on standardization, ETAS products, and other useful website links:"},"364":{y:0,u:"../Resources/Manual/EN/SiL Python API.htm",l:-1,t:"Help Topics of Python Bindings for TargetClient APIs",i:0.000874972737132834,a:"Contains the help topics of SiL Python Bindings for TargetClient APIs. Introduction System Requirements Files in COSYM Installation Folder Accessing the TargetClient API Functions Exposed from TargetClientPythonAPI.py COSYM Workflow Error Info APIs"},"365":{y:0,u:"../Resources/Topic/Phython_scripting/Introduction.htm",l:-1,t:"Introduction",i:0.000827873641164873,a:"Introduction The Python Bindings for TargetClient API provide functions to control the simulation run ( Parameterization APIs ) without the help of ETAS Experiment Environment. These functions are applicable only for the  SiL ATS use case."},"366":{y:0,u:"../Resources/Topic/Phython_scripting/System_requirements.htm",l:-1,t:"System Requirements",i:0.000827873641164873,a:"It is necessary to install the packages listed below to run the  TargetClient APIs of Python. COSYM V3.4.1 Python 3.7  (64-bit version recommended) Python is an open source software and can be downloaded from the link;  https://www.python.org/downloads/ Choose Python 3.7.1 Download the Windows ..."},"367":{y:0,u:"../Resources/Topic/Phython_scripting/File_details.htm",l:-1,t:"Files in COSYM Installation Folder",i:0.000827873641164873,a:"Files in  COSYM Installation Folder The required files are available at \u003cCOSYM installation directory\u003eSimulator\\win64\\atssimulator\\PythonBindings folder."},"368":{y:0,u:"../Resources/Topic/Phython_scripting/Access_TargetClient_API.htm",l:-1,t:"Accessing the TargetClient API",i:0.000827873641164873,a:"Accessing the  TargetClient API In the TestTCPythonAPI.py file, an example is shown on how to access the TargetClientPythonAPI.py file. The example file is provided in the COSYM demo data location. The demo data location is the location specified during COSYM installation. The default location is  ..."},"369":{y:0,u:"../Resources/Topic/Phython_scripting/Control_APIs_Table.htm",l:-1,t:"Functions Exposed from TargetClientPythonAPI.py",i:0.000827873641164873,a:"Functions Exposed from  TargetClientPythonAPI.py This chapter contains the information about exposed functions, function parameter details, and simulation state mapping. Control APIs Parameterization APIs Signal Injection APIs Data Logger APIs Error Info APIs Watcher, Capture, and Breakpoint APIs ..."},"370":{y:0,u:"../Resources/Topic/Phython_scripting/Control APIs.htm",l:-1,t:"Control APIs",i:0.000809588466394228,a:"Control APIs"},"371":{y:0,u:"../Resources/Topic/Phython_scripting/Parameterization_APIs.htm",l:-1,t:"Parameterization APIs",i:0.0021266677979938,a:"Parameterization APIs"},"372":{y:0,u:"../Resources/Topic/Phython_scripting/Signal_Injection_APIs.htm",l:-1,t:"Signal Injection APIs",i:0.000809588466394228,a:"Signal Injection APIs"},"373":{y:0,u:"../Resources/Topic/Phython_scripting/Data_Logger_APIs.htm",l:-1,t:"Data Logger APIs",i:0.000809588466394228,a:"Data Logger APIs"},"374":{y:0,u:"../Resources/Topic/Phython_scripting/Error_Codes.htm",l:-1,t:"Error Reporting",i:0.000721626612340466,a:"The ATS API return mechanism is standardized in COSYM and new API is introduced to know the error description.  Return Codes and its Descriptions For the successful execution, it returns the value SIL_SUCCESS All the error return values must start from 0x80000000 To simplify, the errors are sub ..."},"375":{y:0,u:"../Resources/Topic/Phython_scripting/SiL Driver APIs.htm",l:-1,t:"SiL Driver APIs",i:0.000721626612340466,a:"In the SiL Driver APIs, the following classes are available. ScalarBuffer class ModelLoader class ExternalModel class SignalGroup class  SimHandle class ScalarBuffer  Class Manages a buffer of scalar type set_import_timeout and get_model_loader APIs ModelLoader  Class ModelLoader represents a loader ..."},"376":{y:0,u:"../Resources/Topic/Phython_scripting/WatcherAPIs.htm",l:-1,t:"Watcher, Capture, and Breakpoint APIs",i:0.000809588466394228,a:"Watcher, Capture, and Breakpoint APIs"},"377":{y:0,u:"../Resources/Topic/Phython_scripting/Function_Parameter_Details.htm",l:-1,t:"Function Parameter Details",i:0.000809588466394228,a:"modelAddressDict : For example; {\"raster1\":[\u0027MiL_Three_Cyl_7_ECU/Inports/ICE_nEng\u0027],\"raster2\":[\u0027MiL_Three_Cyl_7_ECU/Inports/ICE_facLoadMf_2\u0027]} or \u0027all\u0027 modelAddress      : For example; Model0/Inports/In1 loggingAddress:  Filename to be logged (e.g. file://DataBrokerFile.csv )"},"378":{y:0,u:"../Resources/Topic/Phython_scripting/Simulation State Mapping.htm",l:-1,t:"Simulation State Mapping",i:0.000809588466394228,a:"Simulation State Mapping After calling GetCurrentSimulationState() API, it generally returns the state in decimal format. The table below shows the state mapping of the returned decimal value."},"379":{y:0,u:"../Resources/Topic/Phython_scripting/COSYM_workflow.htm",l:-1,t:"COSYM Workflow",i:0.000827873641164873,a:"The workflow below shows how to create the Sample.py file. The deployablesWindows.zip and configFiles.zip folders are required to call the SiL APIs. These will be created during the build process of a COSYM project. To create deployablesWindows.zip and configFiles.zip folders Launch COSYM and create ..."},"380":{y:0,u:"../Resources/Topic/Phython_scripting/ImportingTargetClientPythonAPI.htm",l:-1,t:"Creating Example File to Use TargetClient Python Model",i:0.000721626612340466,a:"Create a Sample.py file in any of the text editor or python editor by referring to the mentioned steps below: Copy import TargetClientPythonAPI from time import sleep import sys MIN_INT = -2147483648   Copy Test ErrorDescription API def GetErrorDescription(errorCode):     if errorCode != 0: ..."},"381":{y:0,u:"../Resources/Topic/Phython_scripting/Calling Exposed Functions from Main().htm",l:-1,t:"Calling Exposed Functions from Main()",i:0.000721626612340466,a:"Copy def main():          try:         deployablePath=str(sys.argv[1])         configPath=str(sys.argv[2])                          print(\u0027\\n-----------------------------------------\u0027)         print(\u0027\\n     Control Client Test Execution:\u0027 )     ..."},"382":{y:0,u:"../Resources/Topic/Phython_scripting/Executing the Python File.htm",l:-1,t:"Executing the Python File",i:0.000721626612340466,a:"Above mentioned example is created for ‘3CylATS_Sim’ project which comes along with installer. Build the project with newly installed COSYM installer and execute the sample file using the commands below: \u003cCOSYM demo data location\u003e\\Samples\\PythonScripts\\PyEnvSettings.bat python Sample.py \u003cCOSYM demo ..."},"383":{y:0,u:"../Resources/Topic/Phython_scripting/Error_Info_APIs.htm",l:-1,t:"Error Info APIs",i:0.000915835495218635,a:"Error Info APIs"},"384":{y:0,u:"../Resources/Manual/EN/vNET.htm",l:-1,t:"Help Topics of Virtual Networks",i:0.000874972737132834,a:"Help Topics of Virtual Networks Contains the help topics of COSYM Virtual Networks. VNET Workflow General information on COSYM vNet General Concepts VNET VNET CAN vNet Ethernet vNet FlexRay VNET LIN"},"385":{y:0,u:"../Resources/Topic/vNET_Guide/Introduction.htm",l:-1,t:"VNET Workflow",i:0.000814592762561823,a:"VNET Workflow The VNET documentation contains the following sections to address individual stakeholders and help them in the integration of VNET: A VECU Developer Guide A System Integrator Guide Troubleshooting Guide"},"386":{y:0,u:"../Resources/Topic/vNET_Guide/A vECU Developer Guide.htm",l:-1,t:"A VECU Developer Guide",i:0.000721626612340466,a:"How to integrate VNET in VECU tool-chain? In this page, we will focus on enabling the VECU Developers to setup a VNET interface to their VECU and test the setup. VNET stands for Virtual Network. The following are addressed below: How does the network simulation work in COSYM SiL? What is the state ..."},"387":{y:0,u:"../Resources/Topic/vNET_Guide/A System Integrator Guide.htm",l:-1,t:"A System Integrator Guide",i:0.00481059945684117,a:"Integrating VECU with VNET and Performing Simulation In this section, we will focus on enabling the COSYM users to setup a COSYM project with VNET and perform simulation. The following are addressed: How to integrate a VECU that has a VNET interface in COSYM SiL? How to create a network interface ..."},"388":{y:0,u:"../Resources/Topic/vNET_Guide/Troubleshooting Guide.htm",l:-1,t:"Troubleshooting Guide",i:0.00481059945684117,a:"COSYM SiL Extended Functionalities In this page, we will focus on applying the available troubleshooting methods for COSYM SiL and understand the underlying network and simulation behavior. We will address the following: What should I do when my simulation does not step? What information does the ..."},"389":{y:0,u:"../Resources/Topic/vNET_Guide/VNET.htm",l:-1,t:"General information on COSYM vNet",i:0.000814592762561823,a:"The COSYM VNET is based on the ESSE Systems Engineering Workbench for ETAS that enables a structural architecture for the design of network- connected, heterogeneous plant and control models, to be accurately modeled and simulated with near maximum performance on multi-core computers. The ESSE ..."},"390":{y:0,u:"../Resources/Topic/vNET_Guide/NetworkProtocolModelingCapabilities.htm",l:-1,t:"Network Protocol Modeling Capabilities",i:0.000721626612340466,a:"A distributed system model can be constructed from any number of models (including any number of coupled, third party tool based, models). Any number of each type of SNF network can be instantiated within a distributed system model. Each instance of an SNF network can have any number of connections ..."},"391":{y:0,u:"../Resources/Topic/vNET_Guide/General_Concepts.htm",l:-1,t:" ETAS Virtual Networks (VNET)",i:0.000721626612340466,a:" ETAS Virtual Networks (VNET) This chapter contains the following sections. General Concepts Basic Requirements to use Virtual Networks Global Configuration Available Network Types Example Stepping Parameters Applications PreStep and PostStep Stepping the Virtual Network Interfaces Transmission of ..."},"392":{y:0,u:"../Resources/Topic/vNET_Guide/GeneralConceptsVNET.htm",l:-1,t:"General Concepts",i:0.00117704723934378,a:"A vNet simulation consists of at least one network configuration file and some simulation binaries (executable files).  The network configuration is represented by an XML file. The simulation is based on virtual networks and its interfaces as given below: No real network interfaces are required. ..."},"393":{y:0,u:"../Resources/Topic/vNET_Guide/Basic Requirements to use Virtual Networks.htm",l:-1,t:"Basic Requirements to use Virtual Networks",i:0.000777388839537691,a:"All simulation binaries which you want to communicate via  ETAS Virtual Networks must be running as application processes on the same machine (Linux or Windows) Several models can be in the same binary executabale file and share the same process All applications must link to ESSE libraries Run ..."},"394":{y:0,u:"../Resources/Topic/vNET_Guide/Global Configuration.htm",l:-1,t:"Global Configuration",i:0.000777388839537691,a:"A single global configuration file is required to configure the network simulation, it is used by EsseRun to start the simulation. This file contains the description of the network instances and their parameters with the tag SnfInstance. It is evaluated by EsseRun to start all simulation ..."},"395":{y:0,u:"../Resources/Topic/vNET_Guide/Available Network Types.htm",l:-1,t:"Available Network Types",i:0.000777388839537691,a:"Available Network Types ESSE offers implementations for various network technologies common in automotive application area:"},"396":{y:0,u:"../Resources/Topic/vNET_Guide/Example.htm",l:-1,t:"Example",i:0.000777388839537691,a:"In the following example, we consider 3 applications running as 3 processes are communicating via 2 different networks such as  CAN and Ethernet. All 3 applications use the CAN network, but only the applications 1 and 2 are connected to the Ethernet network. So 5 network interfaces in total need to ..."},"397":{y:0,u:"../Resources/Topic/vNET_Guide/Stepping Parameters.htm",l:-1,t:"Stepping Parameters",i:0.000777388839537691,a:"In the aforementioned example also note the stepping parameters for both networks, Ethernet and CAN: ticks Number of base ticks per second. Base ticks is a common time unit to describe other timing parameters. The number of base ticks per second must be sufficiently high in order to describe other ..."},"398":{y:0,u:"../Resources/Topic/vNET_Guide/Applications.htm",l:-1,t:"Applications",i:0.000777388839537691,a:"In the example above, 3 different applications (models) would be launched by EsseRun (on a Windows machine): application1.exe with 2 command line arguments running in a new console window application2.exe with 1 command line arguments running in a new console window application3.exe without command ..."},"399":{y:0,u:"../Resources/Topic/vNET_Guide/PreStep and PostStep.htm",l:-1,t:"PreStep and PostStep",i:0.000777388839537691,a:"Virtual networks need to be stepped in a similar way like normal simulation models. Normal models have typically a step() function which is called at certain points of time during simulation and which is given the step duration as argument. Virtual networks are stepped by two function calls ..."},"400":{y:0,u:"../Resources/Topic/vNET_Guide/Stepping the Virtual Network Interfaces.htm",l:-1,t:"Stepping the Virtual Network Interfaces",i:0.000777388839537691,a:"Similar to simulation models, vNet network interfaces need to be stepped in order to make the network communication happen. Each network interface is represented by a tag SnfConnection in the configuartion file and has an alias name which can be queried by the application. As shown above all ..."},"401":{y:0,u:"../Resources/Topic/vNET_Guide/Transmission of Frames.htm",l:-1,t:"Transmission of Frames",i:0.000777388839537691,a:"The stepping of  ETAS Virtual Network types has the consequence that frames are always received at earliest in the next simulation step: A frame send in simulation step N always arrives at the destination interface(s) in simulation step \u003e= N+1. In principle frames cannot be sent and received in the ..."},"402":{y:0,u:"../Resources/Topic/vNET_Guide/Technical Basics.htm",l:-1,t:"Technical Basics",i:0.000777388839537691,a:" ETAS Virtual Networks are based on shared memory, they are passive and decentralized: There is no central application simulating the network itself There is no governor like a central network server which would have a global view to the network(s) Each communication partner (each station) is ..."},"403":{y:0,u:"../Resources/Topic/vNET_Guide/Overview.htm",l:-1,t:"VNET",i:0.000814592762561823,a:"vNet is intended to be a vendor independent API to create and communicate with ESSE or Third Party virtual network interfaces. When VNET is used with  ETAS Virtual Networks, exists as an API on top of the ESSE SNF API. The actual libraries are called ESSE libraries, but vNet is becoming a common ..."},"404":{y:0,u:"../Resources/Topic/vNET_Guide/vNet Basics and example usage with ESSE Virtual Networks.htm",l:-1,t:"vNet Basics and example usage with  ETAS Virtual Networks",i:0.0134340699365815,a:"Overview Although all vNet interfaces (CAN, FlexRay, Ethernet) look similar, they are totally independent from each other So there is no common base class But the general sequence of API calls is always similar The following description contains facts common for all vNet interfaces: CAN, Automotive ..."},"405":{y:0,u:"../Resources/Topic/vNET_Guide/VNet Interface Callbacks.htm",l:-1,t:"VNet Interface Callbacks",i:0.000721626612340466,a:"As mentioned above you will find a lot of function pointers as members in each of the structures describing vNet interfaces. All of the function pointers will be initialized automatically with pointers to default functions when calling the corresponding *_getInterface function. Some of the function ..."},"406":{y:0,u:"../Resources/Topic/vNET_Guide/Runtime.htm",l:-1,t:"Runtime",i:0.00357633772362172,a:"At the beginning of each simulation cycle each interface requires a call of mPreStepPort() This call must happen before the actual step() function of the model is called mPreStepPort() may block for some time The transmission of frames to destination interfaces in the virtual network happens here ..."},"407":{y:0,u:"../Resources/Topic/vNET_Guide/vNet CAN.htm",l:-1,t:"VNET CAN",i:0.00623145845329473,a:"In general to apply all vNet interfaces, the facts are explained in \"vNet Basics\"  vNet Basics and example usage with  ETAS Virtual Networks . This page aims at outlining the differences between the individual network types and the ESSE implementations of virtual networks. The focus of this page is ..."},"408":{y:0,u:"../Resources/Topic/vNET_Guide/vNet Ethernet.htm",l:-1,t:"vNet Ethernet",i:0.00887980305098617,a:"In general to apply all vNet interfaces, the facts are explained in \"vNet Basics\"  vNet Basics and example usage with  ETAS Virtual Networks . This page aims at outlining the differences between the individual network types and the ESSE implementations of virtual networks. The header file used by ..."},"409":{y:0,u:"../Resources/Topic/vNET_Guide/vNet FlexRay.htm",l:-1,t:"vNet FlexRay",i:0.00485569162301711,a:"In general to apply all vNet interfaces, the facts are explained in \"vNet Basics\"  vNet Basics and example usage with  ETAS Virtual Networks . This page aims at outlining the differences between the individual network types and the ESSE implementations of virtual networks.  The header file used by ..."},"410":{y:0,u:"../Resources/Topic/vNET_Guide/LIN.htm",l:-1,t:"VNET LIN",i:0.00543033319819535,a:"LIN Bus Basics There is always 1 Master node and possibly many Slave nodes on a LIN bus The Master node can also be a Slave The Master node has a schedule, when it is running it follows that schedule and sends requests to Slaves In that schedule, the Master requests information from Slaves It sends ..."},"411":{y:0,u:"../Resources/Manual/Glossary.htm",l:-1,t:"Glossary",i:0.000721626612340466,a:"Glossary  "},});